@startuml
actor User
participant ReactApp as "React App"
participant Backend as "Backend (Express)"
database DB as "PostgreSQL"

group 1. ルーム作成
    User -> ReactApp      : CreateRoom(name, rules)
    ReactApp -> Backend   : POST /api/rooms (name, rules)
    Backend -> DB         : INSERT INTO rooms(...)
    DB --> Backend        : roomId
    Backend --> ReactApp  : 201 Created (roomId)
end group

group 2. ルーム参加
    User -> ReactApp      : JoinRoom(roomId)
    ReactApp -> Backend   : POST /api/rooms/:roomId/join (userId)
    Backend -> DB         : INSERT INTO participants(...)
    DB --> Backend        : success
    Backend --> ReactApp  : 200 OK
end group

group 3. ゲーム開始
    User -> ReactApp      : StartGame(roomId)
    ReactApp -> Backend   : POST /api/rooms/:roomId/start
    Backend -> Backend    : validate participantCount >= 2
    Backend --> ReactApp  : WebSocket broadcast requestParticipation

    loop 全員へ参加確認
        ReactApp -> User  : show confirmation dialog
        User -> ReactApp  : respond(true/false)
        ReactApp -> Backend: WebSocket participationResponse(userId, response)
    end

    Backend -> Backend    : collect and filter responses
    Backend -> DB        : UPDATE participants SET status='joined'
    Backend --> ReactApp : WebSocket broadcast gameStarted
end group

group 4. ゲーム終了・ポイント入力
    User -> ReactApp      : EndGame(roomId)
    ReactApp -> Backend   : POST /api/rooms/:roomId/end
    Backend --> ReactApp  : WebSocket broadcast requestPoints

    loop 各参加者
        ReactApp -> User : input points
        User -> ReactApp : submitPoints(points)
        ReactApp -> Backend: WebSocket submitPoints(userId, points)
    end

    Backend -> Backend    : collect all points
    Backend -> Backend    : calculate results
    Backend --> ReactApp  : WebSocket broadcast showResults
end group

group 5. 確認・確定
    User -> ReactApp      : ConfirmResults()
    ReactApp -> Backend   : POST /api/rooms/:roomId/confirm
    Backend -> DB         : UPDATE users SET total_points = total_points + points
    Backend --> ReactApp  : WebSocket broadcast resultsConfirmed
end group

group 6. 退出・ルーム削除
    User -> ReactApp      : LeaveRoom(roomId)
    ReactApp -> Backend   : DELETE /api/rooms/:roomId/participants/:userId
    Backend -> DB         : DELETE FROM participants WHERE user_id = ? AND total_points = 0
    DB --> Backend        : success
    Backend --> ReactApp  : 200 OK

    User -> ReactApp      : DeleteRoom(roomId)
    ReactApp -> Backend   : DELETE /api/rooms/:roomId
    Backend -> DB         : DELETE FROM rooms WHERE total_points = 0
    DB --> Backend        : success
    Backend --> ReactApp  : 200 OK
end group

@enduml


