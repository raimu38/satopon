--- FILE: ./app/c420/inshi/page.tsx ---

"use client";

import { useState, useCallback } from "react";
import { jsPDF } from "jspdf";

export default function Home() {
  // mm単位での入力
  const [widthMm, setWidthMm] = useState<number>(160);
  const [heightMm, setHeightMm] = useState<number>(170);
  const [numChars, setNumChars] = useState<number>(400);
  const [pdfUrl, setPdfUrl] = useState<string | null>(null);

  const generatePdf = useCallback(() => {
    const PAGE_W = 210; // A4幅 (mm)
    const PAGE_H = 297; // A4高 (mm)
    const areaW = widthMm;
    const areaH = heightMm;

    // マスサイズ初期推定
    let boxSize = Math.sqrt((areaW * areaH) / Math.max(1, numChars));
    for (let i = 0; i < 500; i++) {
      const cols = Math.floor(areaW / boxSize);
      const rows = Math.floor(areaH / boxSize);
      if (cols * rows >= numChars) break;
      boxSize *= 0.98;
    }

    const cols = Math.floor(areaW / boxSize);
    const rows = Math.floor(areaH / boxSize);
    const total = cols * rows;

    const gridW = cols * boxSize;
    const gridH = rows * boxSize;
    const offsetX = (PAGE_W - gridW) / 2;
    const offsetY = (PAGE_H - gridH) / 2;

    const doc = new jsPDF({ unit: "mm", format: "a4" });

    // 外枠
    doc.setDrawColor(0);
    doc.setLineWidth(0.8);
    doc.rect(offsetX, offsetY, gridW, gridH);
    doc.setFontSize(10);
    doc.text(`${widthMm} mm × ${heightMm} mm`, offsetX + 2, offsetY - 2);

    // グリッド線
    doc.setLineWidth(0.2);
    for (let r = 0; r < rows; r++) {
      for (let c = 0; c < cols; c++) {
        doc.rect(offsetX + c * boxSize, offsetY + r * boxSize, boxSize, boxSize);
      }
    }

    // 列・行・合計マス数
    doc.setFontSize(12);
    const info = `Cols: ${cols}, Rows: ${rows}, Total: ${total}`;
    doc.text(info, PAGE_W / 2, offsetY + gridH + 10, { align: "center" });

    // Blob→URL
    const blob = doc.output("blob");
    const url = URL.createObjectURL(blob);
    // 既存のURLを解放
    if (pdfUrl) URL.revokeObjectURL(pdfUrl);
    setPdfUrl(url);
  }, [widthMm, heightMm, numChars, pdfUrl]);

  return (
    <main className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex flex-col items-center p-8 relative overflow-hidden">
      {/* 背景エフェクト */}
      <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 via-purple-500/10 to-pink-500/10"></div>
      <div className="absolute top-0 left-0 w-full h-full">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-1/4 right-1/4 w-80 h-80 bg-gradient-to-r from-pink-400/20 to-purple-400/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
      </div>

      {/* メインコンテンツ */}
      <div className="relative z-10 w-full max-w-6xl">
        {/* ヘッダー */}
        <div className="text-center mb-12">
          <h1 className="text-6xl font-black bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent mb-4 tracking-tight">
            PDF グリッド
          </h1>
          <h2 className="text-4xl font-bold text-white/90 mb-2">ジェネレータ</h2>
          <p className="text-xl text-white/70 font-light">美しいグリッドPDFを瞬時に生成</p>
        </div>

        {/* メインコンテナ */}
        <div className="grid lg:grid-cols-2 gap-8 items-start">
          {/* 左側: 入力フォーム */}
          <div className="bg-white/10 backdrop-blur-xl p-8 rounded-3xl shadow-2xl border border-white/20 hover:bg-white/15 transition-all duration-300">
            <div className="space-y-6">
              {/* 横幅入力 */}
              <div className="group">
                <label className="block mb-3">
                  <span className="text-white/90 font-semibold text-lg flex items-center gap-2">
                    <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                    横幅 (mm)
                  </span>
                  <div className="mt-2 relative">
                    <input
                      type="number"
                      step="1"
                      value={widthMm}
                      onChange={(e) => setWidthMm(parseInt(e.target.value, 10))}
                      className="w-full bg-white/20 backdrop-blur-sm border border-white/30 rounded-2xl px-4 py-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200 text-lg font-medium"
                      placeholder="160"
                    />
                    <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-400/20 to-purple-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                  </div>
                </label>
              </div>

              {/* 縦幅入力 */}
              <div className="group">
                <label className="block mb-3">
                  <span className="text-white/90 font-semibold text-lg flex items-center gap-2">
                    <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                    縦幅 (mm)
                  </span>
                  <div className="mt-2 relative">
                    <input
                      type="number"
                      step="1"
                      value={heightMm}
                      onChange={(e) => setHeightMm(parseInt(e.target.value, 10))}
                      className="w-full bg-white/20 backdrop-blur-sm border border-white/30 rounded-2xl px-4 py-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent transition-all duration-200 text-lg font-medium"
                      placeholder="170"
                    />
                    <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-purple-400/20 to-pink-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                  </div>
                </label>
              </div>

              {/* 最小マス数入力 */}
              <div className="group">
                <label className="block mb-6">
                  <span className="text-white/90 font-semibold text-lg flex items-center gap-2">
                    <div className="w-2 h-2 bg-pink-400 rounded-full"></div>
                    最小マス数（文字数目安）
                  </span>
                  <div className="mt-2 relative">
                    <input
                      type="number"
                      value={numChars}
                      onChange={(e) => setNumChars(parseInt(e.target.value, 10))}
                      className="w-full bg-white/20 backdrop-blur-sm border border-white/30 rounded-2xl px-4 py-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-pink-400 focus:border-transparent transition-all duration-200 text-lg font-medium"
                      placeholder="400"
                    />
                    <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-pink-400/20 to-blue-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                  </div>
                </label>
              </div>

              {/* 生成ボタン */}
              <button
                onClick={generatePdf}
                className="w-full bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 text-white py-4 rounded-2xl font-bold text-lg hover:from-blue-600 hover:via-purple-600 hover:to-pink-600 transition-all duration-300 transform hover:scale-105 hover:shadow-2xl active:scale-95 border border-white/20"
              >
                <span className="flex items-center justify-center gap-2">
                  <div className="w-2 h-2 bg-white rounded-full animate-pulse"></div>
                  PDF を生成
                  <div className="w-2 h-2 bg-white rounded-full animate-pulse delay-500"></div>
                </span>
              </button>

              {/* ダウンロードリンク */}
              {pdfUrl && (
                <div className="mt-6 p-4 bg-green-500/20 backdrop-blur-sm rounded-2xl border border-green-400/30">
                  <a
                    href={pdfUrl}
                    download="grid.pdf"
                    className="block text-center text-green-300 hover:text-green-200 font-semibold text-lg transition-colors duration-200"
                    onClick={() => {
                      setTimeout(() => {
                        URL.revokeObjectURL(pdfUrl);
                        setPdfUrl(null);
                      }, 100);
                    }}
                  >
                    ✨ ここをクリックしてダウンロード ✨
                  </a>
                </div>
              )}
            </div>
          </div>

          {/* 右側: プレビュー */}
          <div className="bg-white/10 backdrop-blur-xl p-8 rounded-3xl shadow-2xl border border-white/20 hover:bg-white/15 transition-all duration-300">
            <h3 className="text-2xl font-bold text-white/90 mb-6 flex items-center gap-2">
              <div className="w-3 h-3 bg-gradient-to-r from-blue-400 to-purple-400 rounded-full"></div>
              プレビュー
            </h3>
            {pdfUrl ? (
              <div className="relative rounded-2xl overflow-hidden bg-white/5 border border-white/20">
                <iframe
                  src={pdfUrl}
                  title="PDF Preview"
                  width="100%"
                  height="600px"
                  className="rounded-2xl"
                />
              </div>
            ) : (
              <div className="h-96 flex items-center justify-center bg-white/5 rounded-2xl border border-white/20 border-dashed">
                <div className="text-center">
                  <div className="w-16 h-16 bg-gradient-to-r from-blue-400 to-purple-400 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse">
                    <div className="w-8 h-8 bg-white rounded-sm"></div>
                  </div>
                  <p className="text-white/60 text-lg font-medium">PDFを生成してプレビューを表示</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* フッター */}
      <footer className="mt-16 text-white/50 text-sm font-light relative z-10">
        <div className="flex items-center gap-2">
          <div className="w-1 h-1 bg-white/30 rounded-full"></div>
          &copy; {new Date().getFullYear()} PDF Grid Generator
          <div className="w-1 h-1 bg-white/30 rounded-full"></div>
        </div>
      </footer>
    </main>
  );
}


--- FILE: ./app/c420/page.tsx ---

// app/c420/page.tsx
"use client";

import Link from "next/link";
import { useRouter } from "next/navigation";
import { useEffect, useState, useMemo } from "react";
import { auth } from "@/lib/firebaseClient";
import { signOut } from "firebase/auth";
import { onAuthStateChanged } from "firebase/auth";
import * as api from "@/lib/api";
import { usePresence } from "@/context/PresenceContext";
import styles from "./Header.module.css";
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  LineChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Line,
  Tooltip,
} from "recharts";
export default function DashboardPage() {
  const router = useRouter();
  const [token, setToken] = useState<string | null>(null);
  const [me, setMe] = useState<any>(null);
  const [rooms, setRooms] = useState<any[]>([]);
  const [allRooms, setAllRooms] = useState<any[]>([]);
  const [msg, setMsg] = useState("");
  const [newRoom, setNewRoom] = useState({
    name: "",
    color_id: 1,
    description: "",
  });
  const [isEditingName, setIsEditingName] = useState(false);
  const [editedName, setEditedName] = useState("");
  // タブ切り替え用のステートを定義
  const [activeTab, setActiveTab] = useState<
    "overview" | "recent_battles" | "sato_transactions"
  >("overview");

  // Modal states
  const [showRoomModal, setShowRoomModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [formError, setFormError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [userList, setUserList] = useState<any[]>([]);
  const [showProfileModal, setShowProfileModal] = useState(false);
  const [userPointHistory, setUserPointHistory] = useState<any[]>([]);
  const [roomModalTab, setRoomModalTab] = useState<
    "joined" | "created" | "all"
  >("joined");
  const [initializing, setInitializing] = useState(true);
  const {
    wsReady,
    subscribePresence,
    unsubscribePresence,
    onlineUsers,
    onEvent,
  } = usePresence();

  useEffect(() => {
    if (!token) return;
    api
      .getUserPointHistory(token)
      .then((history) => {
        setUserPointHistory(history);
      })
      .catch((error) => {
        console.error("Failed to fetch user point history:", error);
      });
  }, [token]);

  useEffect(() => {
    if (!token) return;

    api
      .getListUsers(token)
      .then((users) => {
        setUserList(users);
      })
      .catch((err) => {
        console.error("Failed to fetch user list:", err);
      });
  }, [token]);

  const performanceData = useMemo(() => {
    if (!me) return [];

    const ponRoundsHistory = userPointHistory
      .filter((r) => r.round_id.startsWith("PON") && r.created_at) // created_at が存在するPONラウンドのみ
      .sort(
        (a, b) =>
          new Date(a.created_at).getTime() - new Date(b.created_at).getTime()
      ); // 古い順にソート

    let runningWins = 0;
    return ponRoundsHistory.map((round, index) => {
      const myValue = round.points.find((p) => p.uid === me.uid)?.value || 0;
      if (myValue > 0) runningWins++;
      return {
        round: index + 1, // 各ラウンドに時系列順のインデックスを割り当て
        score: myValue, // そのラウンドのユーザーのスコア
        winRate: Math.round((runningWins / (index + 1)) * 100), // 累積勝率
      };
    });
  }, [userPointHistory, me]); // userPointHistoryとmeが変更されたときに再計算
  const stats = useMemo(() => {
    // ログインユーザー情報または履歴データがなければ、すべて0を返す
    if (!me || userPointHistory.length === 0) {
      return {
        // PONゲームのカウント
        ponRounds: 0,
        wins: 0,
        totalPonPts: 0,
        winRate: 0,
        avgPonPts: 0,

        // 最大・最小・連勝記録
        maxPon: 0,
        minPon: 0,
        bestStreak: 0,

        // SATO取引の合計
        satoIn: 0,
        satoOut: 0,
        satoNet: 0,
        avgSato: 0,
        maxSato: 0,

        // 新規：対戦相手をグループ化したデータ
        groupedOpponents: [],
      };
    }

    // ヘルパー関数: このユーザーのポイント値を取得 (見つからなければ0)
    const myValue = (rec: any) => {
      const p = rec.points.find((p: any) => p.uid === me.uid);
      return p ? p.value : 0;
    };

    // --- PONの統計情報 ---
    const pon = userPointHistory.filter((r) => r.round_id.startsWith("PON"));
    const sato = userPointHistory.filter((r) => r.round_id.startsWith("SATO"));

    const ponRounds = pon.length; // PONラウンド数
    const valuesPon = pon.map(myValue); // このユーザーのPONポイント値の配列
    const wins = valuesPon.filter((v) => v > 0).length; // プラス得点のラウンド数
    const totalPonPts = valuesPon.reduce((sum, v) => sum + v, 0); // 純PONポイント
    const winRate = ponRounds
      ? Math.round((wins / ponRounds) * 100) // 勝率を整数パーセントで
      : 0;
    const avgPonPts = ponRounds
      ? Math.round(totalPonPts / ponRounds) // PONラウンドあたりの平均ポイント
      : 0;
    const maxPon = ponRounds
      ? Math.max(...valuesPon) // 最高の単一ラウンドPONポイント
      : 0;
    const minPon = ponRounds
      ? Math.min(...valuesPon) // 最悪の単一ラウンドPONポイント
      : 0;

    // 最長連勝記録の計算
    let bestStreak = 0;
    let cur = 0;
    valuesPon.forEach((v) => {
      if (v > 0) {
        cur += 1;
        bestStreak = Math.max(bestStreak, cur);
      } else {
        cur = 0;
      }
    });

    // --- SATOの統計情報 ---
    const valuesSato = sato.map(myValue); // このユーザーのSATOポイント値の配列
    const satoIn = valuesSato
      .filter((v) => v > 0) // 入金のみ
      .reduce((sum, v) => sum + v, 0); // 受取額の合計
    const satoOut = valuesSato
      .filter((v) => v < 0) // 出金のみ
      .reduce((sum, v) => sum + Math.abs(v), 0); // 支払額の合計
    const satoNet = satoIn - satoOut; // 純残高
    const avgSato = sato.length
      ? Math.round(satoNet / sato.length) // SATOラウンドあたりの平均
      : 0;
    const maxSato = sato.length
      ? Math.max(...valuesSato) // 最大の単一ラウンドSATO変動
      : 0;

    // --- 新規: 対戦相手をグループ化したデータ ---
    const groupedOpponents: {
      roundId: string;
      roomId: string;
      date: string;
      participants: {
        uid: string;
        displayName: string;
        iconUrl: string | null;
        score: number;
      }[];
    }[] = pon
      .map((round) => {
        // `created_at` が存在すればそれを使用、なければ現在の時刻をフォールバックとして使用
        const date = round.created_at
          ? new Date(round.created_at).toLocaleDateString("en-US", {
              year: "numeric",
              month: "short",
              day: "numeric",
            })
          : "Unknown Date";
        const participants = round.points.map((point: any) => {
          const user = userList.find((u) => u.uid === point.uid);
          return {
            uid: point.uid,
            displayName: user?.display_name || "Unknown User",
            iconUrl: user?.icon_url || null,
            score: point.value,
          };
        });
        return {
          roundId: round.round_id,
          roomId: round.room_id,
          date: date,
          participants: participants,
        };
      })
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()); // 最新のものを上位にソート

    // 計算されたすべてのメトリクスを一つのオブジェクトとして返す
    return {
      ponRounds,
      wins,
      totalPonPts,
      winRate,
      avgPonPts,
      maxPon,
      minPon,
      bestStreak,
      satoIn,
      satoOut,
      satoNet,
      avgSato,
      maxSato,
      groupedOpponents, // 新しく追加した対戦相手データ
    };
  }, [userPointHistory, me, userList]); // userListも依存配列に含める
  useEffect(() => {
    if (token) {
      api
        .getUserPointHistory(token)
        .then((history) => {
          console.log("User Point History:", history);
        })
        .catch((error) => {
          console.error("Failed to fetch user point history:", error);
        });
    }
  }, [token]); // token が変更された時にこの処理が実行されます
  // New logic to handle Firebase auth state and user setup
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (!user) {
        router.replace("/");
        return;
      }
      try {
        const idToken = await user.getIdToken();
        setToken(idToken);

        // 既存ユーザー API 取得
        try {
          const appUser = await api.getMe(idToken);
          setMe(appUser);
        } catch {
          // ユーザーが存在しなければ作成
          const newUser = await api.createUser(idToken, {
            display_name: user.displayName || user.email!.split("@")[0],
            email: user.email!,
            icon_url: user.photoURL ?? "",
          });
          setMe(newUser);
        }
      } catch (err) {
        console.error("ユーザー情報の取得・作成に失敗", err);
      } finally {
        // 認証まわりの初期化は一度だけ
        setInitializing(false);
      }
    });

    return () => unsubscribe();
  }, [router]);
  useEffect(() => {
    if (showProfileModal) {
      setEditedName(me?.display_name || "");
      setIsEditingName(false);
    }
  }, [showProfileModal, me?.display_name]);
  useEffect(() => {
    const off = onEvent((ev) => {
      switch (ev.type) {
        case "user_entered":
        case "user_left":
        case "join_request":
        case "join_request_cancelled":
        case "join_rejected":
        case "join_approved":
          setMsg((m) => m + "x");
          break;
        default:
          break;
      }
    });
    return off;
  }, [onEvent]);

  useEffect(() => {
    if (!token) return;
    api.listRooms(token).then(setRooms);
  }, [token, msg]);

  useEffect(() => {
    if (!token) return;
    api.getAllRooms(token).then(setAllRooms);
  }, [token, msg]);

  useEffect(() => {
    rooms.forEach((r) => subscribePresence(r.room_id));
    return () => {
      rooms.forEach((r) => unsubscribePresence(r.room_id));
    };
  }, [rooms, subscribePresence, unsubscribePresence]);

  const handleCreateRoom = async () => {
    if (!newRoom.name) {
      setFormError("ルーム名を入力してください");
      return;
    }
    if (newRoom.name.length > 20) {
      setFormError("ルーム名は20文字以内で入力してください");
      return;
    }
    if (newRoom.description.length > 100) {
      setFormError("説明は100文字以内で入力してください");
      return;
    }
    setFormError(null);
    await api.createRoom(token, newRoom);
    setNewRoom({ name: "", description: "" });
    setShowCreateModal(false);
    setMsg("new-room");
  };

  const joinedRooms = rooms;
  const availableRooms = allRooms.filter(
    (r) => !rooms.some((x) => x.room_id === r.room_id)
  );
  const q = searchQuery.trim().toLowerCase();

  const filteredJoined = joinedRooms.filter((r) => {
    if (!q) return true;
    return (
      r.name.toLowerCase().includes(q) || r.room_id.toLowerCase().includes(q)
    );
  });

  const filteredAll = availableRooms.filter((r) => {
    if (!q) return true;
    return (
      r.name.toLowerCase().includes(q) || r.room_id.toLowerCase().includes(q)
    );
  });

  const myRooms = rooms.filter((r) => r.created_by === me?.uid);
  const StatItem = ({
    icon,
    label,
    value,
    color,
  }: {
    icon: string;
    label: string;
    value: string | number;
    color: string;
  }) => (
    <div className="flex flex-col items-center bg-gray-900/60 rounded-lg p-3 border border-gray-700/50 shadow-inner">
      <span className={`material-symbols-outlined text-2xl ${color}`}>
        {icon}
      </span>
      <span className="mt-1 text-lg font-semibold text-white">{value}</span>
      <span className="text-xs text-gray-400">{label}</span>
    </div>
  );

  if (initializing) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mx-auto mb-4"></div>
          <p className="text-gray-400">Loading…</p>
        </div>
      </div>
    );
  }
  if (!token || !me)
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mx-auto mb-4"></div>
          <p className="text-gray-400">Loading…</p>
        </div>
      </div>
    );

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-gray-950 text-gray-100">
      {/* Header */}
      <header
        className={`relative backdrop-blur-lg bg-gray-900/60 border-b border-gray-700/40 ${styles.headerBackground}`}
      >
        <div className="max-w-7xl  mx-auto px-6 py-4">
          <div className="flex justify-between items-center">
            {/* 左側: SATOPON ロゴと status */}
            <div className="flex items-center space-x-4">
              <Link
                href="https://sites.google.com/view/jsato/"
                target="_blank"
                rel="noopener noreferrer"
              >
                <h1 className="text-xl font-bold text-white bg-clip-text text-transparent cursor-pointer hover:underline">
                  SATOPON
                </h1>
              </Link>
              {!wsReady && (
                <p className="text-xs text-yellow-400 animate-pulse">
                  Connecting…
                </p>
              )}
            </div>

            {/* 右側: GitHub + Avatar */}
            <div className="flex items-center space-x-4">
              {/* GitHub */}
              <Link
                href="https://github.com/raimu38/satopon"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-400 hover:text-white transition"
                title="View source on GitHub"
              >
                <span className="material-symbols-outlined text-[24px]">
                  code
                </span>
              </Link>

              {/* Avatar */}
              <div className="relative">
                <button
                  onClick={() => setShowProfileModal(true)}
                  className="w-10 h-10 rounded-full overflow-hidden border-2 border-gray-600 hover:border-gray-800 transition-all duration-700"
                >
                  {me.icon_url ? (
                    <img
                      src={me.icon_url}
                      alt={me.display_name}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="w-full h-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center text-white font-bold">
                      {me.display_name?.charAt(0).toUpperCase()}
                    </div>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-3xl mx-auto px-6 py-8 min-h-[80vh] flex flex-col justify-center">
        <header className="mb-8 text-center">
          <h1 className="text-3xl font-bold text-white">Home</h1>
        </header>

        <div className="grid grid-cols-1 gap-6 h-full">
          <div
            onClick={() => setShowRoomModal(true)}
            className="group cursor-pointer bg-gradient-to-br from-gray-800/50 to-gray-700/30 backdrop-blur-lg rounded-2xl p-6 border border-gray-700/50 hover:border-blue-500/50 transition-all duration-300 hover:scale-101 hover:shadow-2xl hover:shadow-blue-500/20 h-full flex flex-col justify-between"
          >
            {/* 通知バッジ */}
            {rooms.some((r) => r.pending_members?.length > 0) && (
              <div className="absolute top-4 right-4 flex items-center space-x-1">
                <div className="w-2 h-2 bg-yellow-400 rounded-full animate-pulse" />
                <span className="text-yellow-400 text-xs font-medium">
                  Request
                </span>
              </div>
            )}
            <div>
              <div className="flex items-center space-x-4 mb-4">
                <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-xl flex items-center justify-center group-hover:scale-101 transition-transform duration-300">
                  <span className="material-symbols-outlined text-white text-[28px]">
                    meeting_room
                  </span>
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">
                    Room List
                  </h3>
                  <p className="text-gray-400 text-sm">
                    Browse and manage rooms
                  </p>
                </div>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-2xl font-bold text-blue-400">
                {rooms.length}
              </span>
              <span className="text-gray-400 text-sm">Joined Rooms</span>
            </div>
          </div>
        </div>
      </main>

      {/* Room Modal */}
      {showRoomModal && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-0 sm:p-4">
          <div
            className={`
             w-full h-full max-w-full
              overflow-hidden bg-gray-900/95 border border-gray-700/50 shadow-2xl
              rounded-2xl
              sm:max-w-[95%] lg:max-w-4xl
              sm:h-full lg:h-full
              ${styles.modalSlideUp}
           `}
          >
            <div className="max-w-4xl w-full h-full flex flex-col">
              {/* Header */}
              <div className="p-6 border-b border-gray-700/50 bg-gray-800/30">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-3xl font-bold text-white tracking-wide">
                    SATOPON
                  </h2>
                  <button
                    onClick={() => setShowRoomModal(false)}
                    className="w-10 h-10 hover:bg-gray-700/60 rounded-full flex items-center justify-center transition-all duration-200 hover:scale-105"
                    title="Close"
                  >
                    <span className="material-symbols-outlined text-gray-300 text-[22px]">
                      close
                    </span>
                  </button>
                </div>

                {/* Tabs */}
                <div className="flex space-x-2">
                  {[
                    {
                      key: "joined",
                      label: `Joined`,
                      count: joinedRooms.length,
                    },
                    {
                      key: "all",
                      label: `All Rooms`,
                      count: availableRooms.length,
                    },
                  ].map((tab) => (
                    <button
                      key={tab.key}
                      onClick={() =>
                        setRoomModalTab(tab.key as typeof roomModalTab)
                      }
                      className={`
                        relative px-6 py-3 rounded-lg text-sm font-medium
                        transition-all duration-300 ease-out
                        ${
                          roomModalTab === tab.key
                            ? "bg-gray-700/80 text-white shadow-lg"
                            : "text-gray-400 hover:text-white hover:bg-gray-700/40"
                        }
                      `}
                    >
                      <span className="relative z-10">{tab.label}</span>
                      {tab.count > 0 && (
                        <span
                          className={`
                          ml-2 px-2 py-0.5 text-xs rounded-full
                          ${
                            roomModalTab === tab.key
                              ? "bg-blue-500/30 text-blue-200"
                              : "bg-gray-600/50 text-gray-300"
                          }
                        `}
                        >
                          {tab.count}
                        </span>
                      )}
                    </button>
                  ))}
                </div>
              </div>
              {/* ─── 検索バー ─── */}
              <div className="w-full pb-0">
                {/* 入力欄をカード風に囲む */}
                <div className="bg-gray-800/40 p-2 flex items-center">
                  <span className="material-symbols-outlined text-gray-400 mr-2">
                    search
                  </span>
                  <input
                    type="text"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="Search by name or ID"
                    className="flex-1 bg-transparent text-gray-100 placeholder-gray-500 focus:outline-none"
                  />
                </div>
              </div>

              {/* content */}
              <div className="p-6 overflow-y-auto h-full flex-1 scrollbar-hide">
                {roomModalTab === "joined" && (
                  <div className="space-y-4 max-w-3xl mx-auto">
                    {filteredJoined.length > 0 ? (
                      filteredJoined.map((r) => {
                        const count = onlineUsers[r.room_id]?.size ?? 0;
                        const hasPending = r.pending_members?.length > 0;
                        const isOwner = r.created_by === me.uid;
                        return (
                          <Link
                            key={r.room_id}
                            href={`/rooms/${r.room_id}`}
                            className={`
                group block p-5 rounded-xl transition-all duration-300 border
                hover:scale-[1.02] hover:shadow-lg
                ${
                  isOwner
                    ? "border-blue-400/40 bg-gradient-to-r from-blue-500/10 to-blue-600/5 hover:from-blue-500/15 hover:to-blue-600/10"
                    : "border-gray-600/40 bg-gray-800/30 hover:bg-gray-700/40"
                }
              `}
                          >
                            <div className="flex justify-between items-start">
                              <div className="flex items-center space-x-4">
                                <div
                                  className={`
                      w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-lg
                      ${
                        isOwner
                          ? "bg-gradient-to-br from-blue-500 to-blue-600 shadow-lg"
                          : "bg-gradient-to-br from-gray-600 to-gray-700"
                      }
                    `}
                                >
                                  {r.name.charAt(0)}
                                </div>
                                <div>
                                  <h3 className="font-semibold text-white text-lg sm:text-base">
                                    {r.name}
                                  </h3>
                                  <div className="flex items-center space-x-2 text-gray-400 text-sm sm:text-xs">
                                    <span>ID: {r.room_id}</span>
                                    {isOwner && (
                                      <span
                                        className="material-symbols-outlined text-blue-300 text-[18px] opacity-80 group-hover:opacity-100 transition-opacity"
                                        title="Owner"
                                      >
                                        shield_person
                                      </span>
                                    )}
                                    {hasPending && (
                                      <span className="px-2 py-0.5 rounded-full bg-yellow-400/20 border border-yellow-400/30 text-yellow-300">
                                        Request
                                      </span>
                                    )}
                                    {count > 0 ? (
                                      <span className="px-2 py-0.5 rounded-full bg-green-400/20 border border-green-400/30 text-green-300">
                                        {count} Online
                                      </span>
                                    ) : (
                                      <span className="px-2 py-0.5 rounded-full bg-gray-600/20 border border-gray-600/30 text-gray-400">
                                        Offline
                                      </span>
                                    )}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </Link>
                        );
                      })
                    ) : (
                      <div className="text-center py-16">
                        <p className="text-gray-400">
                          No rooms match “{searchQuery}”.
                        </p>
                      </div>
                    )}
                  </div>
                )}

                {roomModalTab === "all" && (
                  <div className="space-y-4 max-w-3xl mx-auto">
                    {filteredAll.length > 0 ? (
                      filteredAll.map((r) => {
                        const pending = r.pending_members?.some(
                          (m: any) => m.uid === me.uid
                        );
                        return (
                          <div
                            key={r.room_id}
                            className="p-5 bg-gray-800/40 rounded-xl border border-gray-600/40 hover:bg-gray-700/50 transition-all duration-300"
                          >
                            <div className="flex items-center justify-between">
                              <div className="flex items-center gap-4">
                                <div className="w-12 h-12 flex items-center justify-center rounded-full bg-gradient-to-br from-gray-600 to-gray-700 text-white text-lg font-bold shadow-lg">
                                  {r.name.charAt(0)}
                                </div>
                                <div className="space-y-1">
                                  <h3 className="text-white font-semibold text-lg">
                                    {r.name}
                                  </h3>
                                  <p className="text-gray-400 text-sm font-mono">
                                    ID: {r.room_id}
                                  </p>
                                </div>
                              </div>

                              <div className="flex items-center space-x-3">
                                {pending ? (
                                  <button
                                    onClick={async () => {
                                      await api.cancelJoinRequest(
                                        token,
                                        r.room_id
                                      );
                                      setMsg("cancel-req");
                                    }}
                                    className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-yellow-500/20 border border-yellow-500/30 hover:bg-yellow-500/30 transition-all duration-200 hover:scale-105"
                                    title="Cancel Request"
                                  >
                                    <span className="material-symbols-outlined text-yellow-400 text-[20px] animate-pulse">
                                      pending
                                    </span>
                                    <span className="text-yellow-300 text-sm font-medium">
                                      Pending
                                    </span>
                                  </button>
                                ) : (
                                  <button
                                    onClick={async () => {
                                      await api.joinRoom(token, r.room_id);
                                      setMsg("join-req");
                                    }}
                                    className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-emerald-500/20 border border-emerald-500/30 hover:bg-emerald-500/30 transition-all duration-200 hover:scale-105"
                                    title="Request to Join"
                                  >
                                    <span className="material-symbols-outlined text-emerald-400 text-[20px]">
                                      add_circle
                                    </span>
                                    <span className="text-emerald-300 text-sm font-medium">
                                      Join
                                    </span>
                                  </button>
                                )}
                              </div>
                            </div>
                          </div>
                        );
                      })
                    ) : (
                      <div className="text-center py-16">
                        <p className="text-gray-400">
                          No rooms match “{searchQuery}”.
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
      {/* Create Room Modal */}
      {showCreateModal && (
        <div
          role="dialog"
          aria-modal="true"
          className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-0 sm:p-4"
        >
          <div
            className={`
              w-full h-full max-w-full rounded-none overflow-hidden
              bg-gray-800/80 border border-gray-600 sm:rounded-2xl shadow-2xl backdrop-blur-xl
              sm:max-w-[95%] sm:h-[95vh]
              lg:max-w-4xl lg:h-[90vh]
              ${styles.modalSlideUp}
              p-6 sm:p-8 lg:p-10 flex flex-col overflow-y-auto
            `}
          >
            {/* Close ボタン */}
            <button
              onClick={() => {
                setShowCreateModal(false);
                setFormError(null);
              }}
              aria-label="Close modal"
              className="absolute top-4 right-4 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-full p-2"
            >
              <span className="material-symbols-outlined text-xl">close</span>
            </button>

            {/* ヘッダー */}
            <header className="flex items-center mb-6">
              <span className="material-symbols-outlined text-blue-400 text-3xl mr-3">
                add_circle
              </span>
              <h2 className="text-2xl sm:text-3xl font-bold text-white tracking-wide">
                Create New Room
              </h2>
            </header>

            {/* 入力フォーム */}
            <form className="flex-1 space-y-6">
              <div>
                <label
                  htmlFor="room-name"
                  className="block text-gray-300 text-sm font-medium mb-2"
                >
                  Room Name <span className="text-red-400">*</span>
                </label>
                <input
                  id="room-name"
                  type="text"
                  placeholder="Enter room name"
                  value={newRoom.name}
                  maxLength={20}
                  onChange={(e) => {
                    setNewRoom({ ...newRoom, name: e.target.value });
                    setFormError(null);
                  }}
                  className="w-full px-4 py-3 bg-gray-900/60 text-white placeholder-gray-400 rounded-lg border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 shadow-inner"
                />
                <p className="text-gray-400 text-xs mt-1 text-right">
                  {newRoom.name.length} / 20
                </p>
              </div>

              <div>
                <label
                  htmlFor="room-description"
                  className="block text-gray-300 text-sm font-medium mb-2"
                >
                  Description
                </label>
                <textarea
                  id="room-description"
                  placeholder="Enter a brief description for your room"
                  value={newRoom.description}
                  maxLength={100}
                  rows={4}
                  onChange={(e) => {
                    setNewRoom({ ...newRoom, description: e.target.value });
                    setFormError(null);
                  }}
                  className="w-full px-4 py-3 bg-gray-900/60 text-white placeholder-gray-400 rounded-lg border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 resize-none shadow-inner"
                />
                <p className="text-gray-400 text-xs mt-1 text-right">
                  {newRoom.description.length} / 100
                </p>
              </div>

              {formError && (
                <p className="text-red-400 text-sm mt-2 text-center">
                  {formError}
                </p>
              )}
            </form>

            {/* アクションボタン */}
            <div className="flex space-x-4 mt-6">
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  setFormError(null);
                }}
                className="flex-1 px-5 py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors duration-200 font-medium shadow"
              >
                Cancel
              </button>
              <button
                onClick={handleCreateRoom}
                className="flex-1 px-5 py-3 bg-blue-600 hover:bg-blue-500 text-white rounded-lg transition-all duration-200 font-bold shadow-lg hover:shadow-xl"
              >
                Create Room
              </button>
            </div>
          </div>
        </div>
      )}
      {showProfileModal && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm w-full h-full flex items-center justify-center z-50 animate-fade-in-up">
          {/* Main Modal Container: 常に全画面表示 */}
          <div className="relative w-full h-full bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 shadow-2xl flex flex-col overflow-hidden animate-scale-up">
            {/* Close Button */}
            <div className="absolute top-4 right-4 z-20">
              <button
                onClick={() => setShowProfileModal(false)}
                className="w-12 h-12 bg-gray-800/80 hover:bg-gray-700/80 rounded-full flex items-center justify-center transition-all duration-300 backdrop-blur-sm border border-gray-600/50 hover:border-gray-500/50 shadow-lg animate-pop"
                title="Close"
              >
                <span className="material-symbols-outlined text-white text-2xl">
                  close
                </span>
              </button>
            </div>

            {/* Header Section: 旧レイアウト ＋ 新統計スタイル */}
            <div className="p-6 sm:p-8 border-b border-gray-700/50">
              <div className="flex items-center space-x-4 sm:space-x-6">
                {/* Avatar */}
                <div className="w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-gradient-to-br from-blue-500 to-purple-700 overflow-hidden border-4 border-gray-600/50 shadow-lg flex-shrink-0">
                  {me.icon_url ? (
                    <img
                      src={me.icon_url}
                      alt={me.display_name}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-white font-bold text-3xl">
                      {me.display_name?.charAt(0).toUpperCase()}
                    </div>
                  )}
                </div>

                {/* User Info & Stats Container */}
                <div className="flex-grow min-w-0">
                  {isEditingName ? (
                    <div className="space-y-3">
                      <input
                        type="text"
                        value={editedName}
                        onChange={(e) => setEditedName(e.target.value)}
                        maxLength={50}
                        className="w-full bg-gray-800/50 border border-gray-600/50 rounded-xl px-4 py-2 text-white text-lg placeholder-gray-400 focus:outline-none focus:border-blue-500/50"
                        placeholder="Enter display name"
                      />
                      <div className="flex space-x-3">
                        <button
                          onClick={async () => {
                            const t = editedName.trim();
                            // 名前が空、または変更がない場合は何もしない
                            if (!t || t === me.display_name) {
                              setIsEditingName(false);
                              return;
                            }
                            try {
                              await api.updateMe(token, { display_name: t });
                              setMe({ ...me, display_name: t }); // フロントエンドの状態も更新
                            } catch (err) {
                              console.error("Failed to update name:", err);
                              // ここでエラーメッセージをユーザーに表示することも可能です
                            } finally {
                              setIsEditingName(false); // 成功・失敗にかかわらず編集モードを閉じる
                            }
                          }}
                          className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 rounded-lg text-white font-medium"
                        >
                          <span className="material-symbols-outlined text-lg">
                            check_circle
                          </span>
                          <span>Save</span>
                        </button>
                        <button
                          onClick={() => {
                            setEditedName(me.display_name); // 変更をリセット
                            setIsEditingName(false);
                          }}
                          className="flex items-center space-x-2 px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg text-white font-medium"
                        >
                          <span className="material-symbols-outlined text-lg">
                            cancel
                          </span>
                          <span>Cancel</span>
                        </button>
                      </div>
                    </div>
                  ) : (
                    <>
                      <h2
                        className="text-2xl sm:text-3xl font-bold text-white mb-1 cursor-pointer hover:text-blue-400 transition-colors truncate"
                        onClick={() => setIsEditingName(true)}
                        title="Click to edit display name"
                      >
                        {me.display_name}
                      </h2>
                      <p className="text-gray-400 text-sm sm:text-base mb-3 truncate">
                        {me.email}
                      </p>

                      {/* Quick Stats: 新しいスタイルを適用 */}
                      <div className="flex flex-wrap items-center gap-2">
                        {" "}
                        {/* gapを縮小 */}
                        <div className="flex items-center space-x-1.5 bg-blue-900/30 px-2.5 py-1 rounded-full border border-blue-700/30">
                          {" "}
                          {/* paddingとspaceを縮小 */}
                          <span className="material-symbols-outlined text-blue-400 text-base">
                            meeting_room
                          </span>{" "}
                          {/* text-lg から text-baseへ */}
                          <span className="text-white font-semibold text-sm">
                            {rooms.length}
                          </span>{" "}
                          {/* 文字サイズをsmに */}
                          <span className="text-blue-200 text-xs">
                            Rooms
                          </span>{" "}
                          {/* 文字サイズをxsに */}
                        </div>
                        <div className="flex items-center space-x-1.5 bg-green-900/30 px-2.5 py-1 rounded-full border border-green-700/30">
                          <span className="material-symbols-outlined text-green-400 text-base">
                            add_box
                          </span>
                          <span className="text-white font-semibold text-sm">
                            {myRooms.length}
                          </span>
                          <span className="text-green-200 text-xs">
                            Created
                          </span>
                        </div>
                        <div className="flex items-center space-x-1.5 bg-purple-900/30 px-2.5 py-1 rounded-full border border-purple-700/30">
                          <span className="material-symbols-outlined text-purple-400 text-base">
                            people
                          </span>
                          <span className="text-white font-semibold text-sm">
                            {Object.values(onlineUsers).reduce(
                              (s, u) => s + u.size,
                              0
                            )}
                          </span>
                          <span className="text-purple-200 text-xs">
                            Online
                          </span>
                        </div>
                      </div>
                    </>
                  )}
                </div>
              </div>
            </div>

            {/* Tab Navigation: スマホでラベルを非表示にする修正 */}
            <div className="flex border-b border-gray-700/50 bg-gray-800/20">
              {[
                {
                  id: "overview",
                  label: "Overview",
                  icon: "dashboard",
                  color: "blue",
                },
                {
                  id: "recent_battles",
                  label: "PON",
                  icon: "leaderboard",
                  color: "purple",
                },
                {
                  id: "sato_transactions",
                  label: "SATO",
                  icon: "payments",
                  color: "emerald",
                },
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  // flex-1でスマホ時に均等幅に、sm以上でpaddingを調整
                  className={`flex flex-1 sm:flex-none items-center justify-center space-x-2 px-2 sm:px-6 py-4 border-b-2 transition-all duration-300 font-medium ${
                    activeTab === tab.id
                      ? `border-${tab.color}-500 text-${tab.color}-400 bg-${tab.color}-900/20`
                      : "border-transparent text-gray-400 hover:text-white hover:bg-gray-700/30"
                  }`}
                >
                  <span className="material-symbols-outlined text-xl">
                    {tab.icon}
                  </span>
                  {/* sm以上の画面でのみラベルを表示 */}
                  <span className="hidden sm:inline">{tab.label}</span>
                </button>
              ))}
            </div>

            {/* Content Area */}
            <div className="flex-1 overflow-y-auto scrollbar-hide">
              <div className="p-6 sm:p-8">
                {/* Overview Tab Content: 改善版 */}
                {activeTab === "overview" && (
                  <div className="space-y-8 animate-fade-in-up">
                    {/* Layout: Pie on left, stats cards on right (2-col on PC, 1-col on mobile) */}
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                      {/* ─── Pie Chart ─── */}
                      <div className="bg-gradient-to-br from-gray-800/60 to-gray-700/30 p-6 rounded-2xl border border-gray-700/50">
                        <div className="flex items-center space-x-3 mb-6">
                          <div className="w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center">
                            <span className="material-symbols-outlined text-blue-400 text-xl">
                              pie_chart
                            </span>
                          </div>
                          <h3 className="text-2xl font-bold text-white">
                            Win/Loss Ratio
                          </h3>
                        </div>
                        <div className="w-full h-64 relative">
                          {stats.ponRounds > 0 ? (
                            <>
                              <ResponsiveContainer width="100%" height="100%">
                                <PieChart>
                                  <Pie
                                    data={[
                                      { name: "Wins", value: stats.wins },
                                      {
                                        name: "Losses",
                                        value: stats.ponRounds - stats.wins,
                                      },
                                    ]}
                                    cx="50%"
                                    cy="50%"
                                    innerRadius={70}
                                    outerRadius={100}
                                    dataKey="value"
                                    stroke="none"
                                    paddingAngle={3}
                                  >
                                    <Cell fill="#3B82F6" />
                                    <Cell fill="#EF4444" />
                                  </Pie>
                                  <Tooltip
                                    contentStyle={{
                                      backgroundColor: "rgba(31,41,55,0.8)",
                                      backdropFilter: "blur(4px)",
                                      border: "1px solid rgba(75,85,99,0.5)",
                                      borderRadius: "0.75rem",
                                      color: "#FFF",
                                    }}
                                    cursor={{ fill: "rgba(255,255,255,0.1)" }}
                                  />
                                </PieChart>
                              </ResponsiveContainer>
                              <div className="absolute inset-0 flex flex-col items-center justify-center pointer-events-none">
                                <span className="text-4xl font-bold text-white">
                                  {stats.winRate}%
                                </span>
                                <span className="text-gray-400 text-sm">
                                  Win Rate
                                </span>
                              </div>
                            </>
                          ) : (
                            <div className="flex flex-col items-center justify-center h-full text-gray-400">
                              <span className="material-symbols-outlined text-6xl">
                                pie_chart_outlined
                              </span>
                              <p className="mt-4">No games played yet</p>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* ─── Stats Cards ─── */}
                      {/* ─── Stats Cards ─── */}
                      <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
                        {[
                          {
                            icon: "crossword",
                            value: stats.ponRounds,
                            label: "Total Games",
                          },
                          {
                            icon: "emoji_events",
                            value: `${stats.winRate}%`,
                            label: "Win Rate",
                          },
                          {
                            icon: "whatshot",
                            value: stats.bestStreak,
                            label: "Best Streak",
                          },
                          {
                            icon: "leaderboard",
                            value: stats.totalPonPts,
                            label: "Total Points",
                          },
                          {
                            icon: "functions",
                            value: stats.avgPonPts,
                            label: "Average Score",
                          },
                          {
                            icon: "swap_vert",
                            value: `${stats.maxPon} / ${stats.minPon}`,
                            label: "Max / Min Score",
                          },
                        ].map((stat, i) => {
                          // グラデーションを適用するカードのインデックス
                          const specialIndices = [0, 2, 4];
                          const isSpecial = specialIndices.includes(i);

                          const specialBg = [
                            "from-blue-800/40 to-blue-600/20 border-blue-500/30",
                            "from-green-800/40 to-green-600/20 border-green-500/30",
                            "from-purple-800/40 to-purple-600/20 border-purple-500/30",
                          ][specialIndices.indexOf(i) % 3];

                          const baseClass = isSpecial
                            ? `bg-gradient-to-br ${specialBg}`
                            : "bg-gray-800/50 border-gray-700/50";

                          return (
                            <div
                              key={stat.label}
                              className={`${baseClass} p-4 rounded-2xl border shadow-md`}
                            >
                              <div className="text-center space-y-2">
                                <span className="material-symbols-outlined text-3xl text-white">
                                  {stat.icon}
                                </span>
                                <div className="text-2xl font-bold text-white">
                                  {stat.value}
                                </div>
                                <div className="text-gray-300 text-sm font-medium">
                                  {stat.label}
                                </div>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                )}

                {/* PON Tab Content */}
                {activeTab === "recent_battles" && (
                  <div className="space-y-8 animate-fade-in-up">
                    {/* Header */}
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-purple-500/20 rounded-full flex items-center justify-center">
                        <span className="material-symbols-outlined text-purple-400 text-xl">
                          leaderboard
                        </span>
                      </div>
                      <h3 className="text-2xl font-bold text-white">
                        Recent PON
                      </h3>
                    </div>

                    {/* 履歴リストとグラフを左右並びにするグリッド */}
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                      {/* ─── 履歴リスト ─── */}
                      {stats.groupedOpponents.length > 0 ? (
                        <div className="space-y-4">
                          {stats.groupedOpponents
                            .slice(0, 10)
                            .map((round, index) => (
                              <Link
                                key={index}
                                href={`/rooms/${round.roomId}`}
                                className="block bg-gradient-to-r from-gray-800/60 to-gray-700/30 p-6 rounded-xl border border-gray-700/50 backdrop-blur-sm hover:shadow-lg transition-all duration-300"
                              >
                                <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-4 sm:space-y-0">
                                  <div className="flex items-center space-x-4">
                                    <div className="flex items-center space-x-2 text-gray-400">
                                      <span className="material-symbols-outlined text-sm">
                                        schedule
                                      </span>
                                      <span className="text-sm font-medium">
                                        {round.date}
                                      </span>
                                    </div>
                                    <div className="flex flex-wrap gap-3">
                                      {round.participants.map((p) => (
                                        <div
                                          key={p.uid}
                                          className="flex items-center space-x-2 bg-gray-700/50 px-3 py-1.5 rounded-full border border-gray-600/50"
                                        >
                                          <div className="w-8 h-8 rounded-full overflow-hidden border-2 border-gray-500">
                                            {p.iconUrl ? (
                                              <img
                                                src={p.iconUrl}
                                                alt={p.displayName}
                                                className="w-full h-full object-cover"
                                              />
                                            ) : (
                                              <div className="w-full h-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white text-xs font-bold">
                                                {p.displayName
                                                  .charAt(0)
                                                  .toUpperCase()}
                                              </div>
                                            )}
                                          </div>
                                          <span
                                            className={`font-bold text-sm ${
                                              p.score > 0
                                                ? "text-emerald-400"
                                                : p.score < 0
                                                  ? "text-red-400"
                                                  : "text-gray-400"
                                            }`}
                                          >
                                            {p.score > 0
                                              ? `+${p.score}`
                                              : p.score}
                                          </span>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                  <div className="flex items-center space-x-2 text-purple-400">
                                    <span>Go Room</span>
                                    <span className="material-symbols-outlined text-lg">
                                      arrow_forward
                                    </span>
                                  </div>
                                </div>
                              </Link>
                            ))}
                          {stats.groupedOpponents.length > 10 && (
                            <div className="text-center pt-4">
                              <button className="text-blue-400 hover:text-blue-300 font-semibold">
                                Show More
                              </button>
                            </div>
                          )}
                        </div>
                      ) : (
                        <div className="text-center py-20 col-span-full">
                          <div className="w-20 h-20 mx-auto mb-6 bg-gray-700/30 rounded-full flex items-center justify-center">
                            <span className="material-symbols-outlined text-gray-400 text-3xl">
                              leaderboard
                            </span>
                          </div>
                          <h4 className="text-xl font-semibold text-white mb-2">
                            No PON yet
                          </h4>
                          <p className="text-gray-400">
                            Join a room and start playing to see your battle
                            history!
                          </p>
                        </div>
                      )}

                      {/* ─── Performance Timeline ─── */}
                      <div className="bg-gradient-to-br from-gray-800/60 to-gray-700/30 p-8 rounded-2xl border border-gray-700/50 backdrop-blur-sm">
                        <div className="flex items-center space-x-3 mb-6">
                          <div className="w-10 h-10 bg-purple-500/20 rounded-full flex items-center justify-center">
                            <span className="material-symbols-outlined text-purple-400 text-xl">
                              show_chart
                            </span>
                          </div>
                          <h3 className="text-2xl font-bold text-white">
                            Performance Timeline
                          </h3>
                        </div>
                        {performanceData.length > 1 ? (
                          <div className="h-80">
                            <ResponsiveContainer width="100%" height="100%">
                              <LineChart
                                data={performanceData}
                                margin={{
                                  top: 5,
                                  right: 20,
                                  left: -10,
                                  bottom: 5,
                                }}
                              >
                                <CartesianGrid
                                  strokeDasharray="3 3"
                                  stroke="#374151"
                                />
                                <XAxis dataKey="round" stroke="#9CA3AF" />
                                <YAxis stroke="#9CA3AF" />
                                <Tooltip
                                  contentStyle={{
                                    backgroundColor: "rgba(31, 41, 55, 0.8)",
                                    backdropFilter: "blur(4px)",
                                    border: "1px solid rgba(75, 85, 99, 0.5)",
                                    borderRadius: "0.75rem",
                                    color: "#FFFFFF",
                                  }}
                                />
                                <Line
                                  type="monotone"
                                  dataKey="score"
                                  stroke="#A78BFA"
                                  strokeWidth={3}
                                  dot={{ fill: "#8B5CF6", r: 4 }}
                                  activeDot={{
                                    r: 7,
                                    stroke: "#A78BFA",
                                    fill: "#A78BFA",
                                  }}
                                />
                              </LineChart>
                            </ResponsiveContainer>
                          </div>
                        ) : (
                          <div className="text-center py-20 text-gray-400">
                            <span className="material-symbols-outlined text-4xl">
                              show_chart
                            </span>
                            <p className="mt-4">
                              At least 2 games needed to show performance chart.
                            </p>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}

                {/* SATO Transactions Tab Content */}
                {activeTab === "sato_transactions" && (
                  <div className="space-y-8 animate-fade-in-up">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-emerald-500/20 rounded-full flex items-center justify-center">
                        <span className="material-symbols-outlined text-emerald-400 text-xl">
                          payments
                        </span>
                      </div>
                      <h3 className="text-2xl font-bold text-white">
                        SATO Transactions
                      </h3>
                    </div>

                    {userPointHistory.filter((r) =>
                      r.round_id.startsWith("SATO")
                    ).length > 0 ? (
                      <div className="space-y-8">
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                          {[
                            {
                              icon: "trending_up",
                              value: stats.satoIn,
                              label: "Total Received",
                              color: "emerald",
                            },
                            {
                              icon: "trending_down",
                              value: stats.satoOut,
                              label: "Total Sent",
                              color: "rose",
                            },
                            {
                              icon: "account_balance",
                              value: stats.satoNet,
                              label: "Net Balance",
                              color: "blue",
                            },
                          ].map((stat) => (
                            <div
                              key={stat.label}
                              className={`bg-gradient-to-br from-${stat.color}-900/40 to-${stat.color}-700/20 p-6 rounded-2xl border border-${stat.color}-600/30 backdrop-blur-sm hover:shadow-xl transition-all duration-300`}
                            >
                              <div className="text-center space-y-3">
                                <div
                                  className={`w-16 h-16 mx-auto bg-${stat.color}-500/20 rounded-full flex items-center justify-center`}
                                >
                                  <span
                                    className={`material-symbols-outlined text-${stat.color}-400 text-3xl`}
                                  >
                                    {stat.icon}
                                  </span>
                                </div>
                                <div className="text-3xl font-bold text-white">
                                  {stat.value}
                                </div>
                                <div
                                  className={`text-${stat.color}-200 text-sm font-medium`}
                                >
                                  {stat.label}
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>

                        <div className="bg-gradient-to-br from-gray-800/60 to-gray-700/30 p-8 rounded-2xl border border-gray-700/50 backdrop-blur-sm">
                          <div className="flex items-center space-x-3 mb-6">
                            <div className="w-10 h-10 bg-emerald-500/20 rounded-full flex items-center justify-center">
                              <span className="material-symbols-outlined text-emerald-400 text-xl">
                                receipt_long
                              </span>
                            </div>
                            <h4 className="text-2xl font-bold text-white">
                              Transaction History
                            </h4>
                          </div>
                          <div className="space-y-4">
                            {userPointHistory
                              .filter((r) => r.round_id.startsWith("SATO"))
                              .slice(0, 10)
                              .map((round) => {
                                const myPoint = round.points.find(
                                  (p) => p.uid === me.uid
                                );
                                const isPositive = myPoint && myPoint.value > 0;
                                const date = new Date(
                                  round.created_at || Date.now()
                                ).toLocaleString("en-US", {
                                  year: "numeric",
                                  month: "short",
                                  day: "numeric",
                                  hour: "2-digit",
                                  minute: "2-digit",
                                });
                                const otherParticipants = round.points
                                  .filter((p) => p.uid !== me.uid)
                                  .map(
                                    (p) =>
                                      userList.find((u) => u.uid === p.uid)
                                        ?.display_name || "Unknown"
                                  )
                                  .join(", ");

                                return (
                                  <div
                                    key={round.round_id}
                                    className={`p-4 rounded-xl border ${isPositive ? "bg-emerald-900/30 border-emerald-700/40" : "bg-rose-900/30 border-rose-700/40"}`}
                                  >
                                    <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
                                      <div className="flex-grow mb-2 sm:mb-0">
                                        <span className="font-bold text-white">
                                          SATO Transfer
                                        </span>
                                        <p className="text-gray-300 text-sm">
                                          {date}
                                        </p>
                                        {otherParticipants && (
                                          <p className="text-gray-300 text-sm mt-1">
                                            To/From:{" "}
                                            <span className="font-medium text-gray-200">
                                              {otherParticipants}
                                            </span>
                                          </p>
                                        )}
                                      </div>
                                      <span
                                        className={`text-2xl font-extrabold ${isPositive ? "text-green-400" : "text-red-400"}`}
                                      >
                                        {myPoint
                                          ? myPoint.value > 0
                                            ? `+${myPoint.value}`
                                            : myPoint.value
                                          : "N/A"}
                                      </span>
                                    </div>
                                  </div>
                                );
                              })}
                            {userPointHistory.filter((r) =>
                              r.round_id.startsWith("SATO")
                            ).length > 10 && (
                              <div className="text-center pt-4">
                                <button className="text-blue-400 hover:text-blue-300 font-semibold">
                                  Show More
                                </button>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="text-center py-20">
                        <div className="w-20 h-20 mx-auto mb-6 bg-gray-700/30 rounded-full flex items-center justify-center">
                          <span className="material-symbols-outlined text-gray-400 text-3xl">
                            credit_card_off
                          </span>
                        </div>
                        <h4 className="text-xl font-semibold text-white mb-2">
                          No SATO transactions found
                        </h4>
                        <p className="text-gray-400">
                          Your SATO transaction history will appear here.
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Footer.tsx */}
      <footer className="fixed bottom-0 inset-x-0 bg-gray-900/90 border-t border-gray-300/20 backdrop-blur-lg z-0">
        <div className="max-w-lg mx-auto flex justify-between items-center py-2 px-6 text-white relative">
          {/* Active Users */}
          <div className="flex items-center space-x-1 text-green-400 text-xs bg-gray-700/30 px-2 py-1 rounded-full backdrop-blur-sm">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
            <span>
              {Object.values(onlineUsers).reduce(
                (sum, users) => sum + users.size,
                0
              )}
            </span>
          </div>

          {/* Center Floating + Button */}
          <button
            onClick={() => setShowCreateModal(true)}
            title="Create Room"
            className={`
          absolute -top-6 left-1/2 transform -translate-x-1/2
          w-14 h-14 rounded-full
          ${styles.createButtonBackground}
          border border-white/20
          backdrop-blur-md shadow-[0_8px_24px_rgba(0,0,0,0.25)]
          text-white transition-all duration-300
          flex items-center justify-center
          `}
          >
            <span className="material-symbols-outlined text-[28px]">add</span>
          </button>
          {/* Profile Button - ガラス感 + カラフル */}
        </div>
      </footer>
    </div>
  );
}


--- FILE: ./app/layout.tsx ---

import "./globals.css";
import { PresenceProvider } from "@/context/PresenceContext";

export const metadata = {
  title: "Satopon",
  description: "Satopon-c420",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="ja">
      <head>
        {/* Google Fonts Icons */}
        <link
          href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined"
          rel="stylesheet"
        />
      </head>
      <body>
        <PresenceProvider>{children}</PresenceProvider>
      </body>
    </html>
  );
}


--- FILE: ./app/page.tsx ---

"use client";
import { useRouter } from "next/navigation";
import { useRef, useState, useEffect, useCallback } from "react";
import AnimationSplash from "@/components/auth/AnimationSplash"; // Assuming this is a pre-existing splash animation

// Import Firebase auth client and functions
import { auth } from "@/lib/firebaseClient";
import { GoogleAuthProvider, signInWithPopup } from "firebase/auth";

export default function AuthPage() {
  const router = useRouter();
  const [isAnimating, setIsAnimating] = useState(false);
  const animationTimer = useRef<NodeJS.Timeout | null>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null); // Ref for our canvas background

  // Function to draw and animate "SATO" text particles on canvas
  const drawSatoBackground = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let animationFrameId: number;
    const particles: SatoParticle[] = [];
    const maxParticles = 30; // Number of "SATO" particles
    const colors = ["#A020F0", "#DA70D6", "#9370DB", "#C0C0C0", "#F0E68C"]; // Purple, Orchid, MediumPurple, Silver, Khaki

    class SatoParticle {
      x: number;
      y: number;
      size: number;
      speedX: number;
      speedY: number;
      color: string;
      rotation: number;
      rotationSpeed: number;
      text: string;
      alpha: number;

      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 30 + 40; // Larger text sizes for impact
        this.speedX = Math.random() * 0.5 - 0.25; // Slow, subtle horizontal movement
        this.speedY = Math.random() * 0.5 - 0.25; // Slow, subtle vertical movement
        this.color = colors[Math.floor(Math.random() * colors.length)];
        this.rotation = Math.random() * Math.PI * 2; // Initial random rotation
        this.rotationSpeed = Math.random() * 0.003 - 0.0015; // Very slow rotation
        this.text = "SATO"; // The text to animate
        this.alpha = Math.random() * 0.4 + 0.1; // Varying transparency (10% to 50%)
      }

      // Update particle position, rotation, and potentially fade (optional)
      update() {
        this.x += this.speedX;
        this.y += this.speedY;
        this.rotation += this.rotationSpeed;

        // Wrap particles around the screen
        if (this.x < -100) this.x = canvas.width + 100;
        if (this.x > canvas.width + 100) this.x = -100;
        if (this.y < -100) this.y = canvas.height + 100;
        if (this.y > canvas.height + 100) this.y = -100;
      }

      // Draw particle on the canvas
      draw() {
        ctx.save();
        ctx.translate(this.x, this.y); // Move origin to particle center for rotation
        ctx.rotate(this.rotation); // Apply rotation
        ctx.fillStyle = this.color;
        ctx.font = `bold ${this.size}px 'Arial', sans-serif`; // Bold font for impact
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        ctx.shadowColor = this.color;
        ctx.shadowBlur = this.size / 5; // Subtle glow effect based on size
        ctx.globalAlpha = this.alpha; // Apply individual transparency

        ctx.fillText(this.text, 0, 0); // Draw the "SATO" text

        ctx.restore(); // Restore previous canvas state
      }
    }

    // Initialize particles
    for (let i = 0; i < maxParticles; i++) {
      particles.push(new SatoParticle());
    }

    // Animation loop
    function animate() {
      ctx!.clearRect(0, 0, canvas!.width, canvas!.height); // Clear the entire canvas each frame

      particles.forEach((particle) => {
        particle.update();
        particle.draw();
      });

      animationFrameId = requestAnimationFrame(animate); // Request next frame
    }

    animate(); // Start the animation

    return () => {
      cancelAnimationFrame(animationFrameId); // Stop the animation
    };
  }, []);

  useEffect(() => {
    const cleanupCanvas = drawSatoBackground();
    window.addEventListener("resize", drawSatoBackground);
    return () => {
      if (cleanupCanvas) cleanupCanvas(); // Clean up canvas animation
      window.removeEventListener("resize", drawSatoBackground); // Remove resize listener
    };
  }, [drawSatoBackground]); // Re-run if drawSatoBackground changes (though it's memoized with useCallback)

  const handleStart = async () => {
    // Check if user is already signed in with Firebase
    if (auth.currentUser) {
      setIsAnimating(true);
      console.log("anima");
      animationTimer.current = setTimeout(() => {
        router.replace("/c420");
      }, 3500);
      return;
    }

    // If not signed in, start Google sign-in flow with Firebase
    const provider = new GoogleAuthProvider();
    try {
      await signInWithPopup(auth, provider);
      // On success, trigger animation and redirect
      setIsAnimating(true);
      animationTimer.current = setTimeout(() => {
        router.replace("/c420");
      }, 3500);
    } catch (error) {
      alert("Google sign-in error: " + (error as Error).message);
      console.error("Google sign-in error: ", error);
    }
  };

  // cleanup: clear timer on component unmount
  useEffect(() => {
    return () => {
      if (animationTimer.current) {
        clearTimeout(animationTimer.current);
      }
    };
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900  flex flex-col relative overflow-hidden">
      <canvas ref={canvasRef} className="absolute inset-0 z-0"></canvas>
      {isAnimating && <AnimationSplash className="absolute inset-0 z-40" />}
      <div className="relative z-10 flex flex-1 flex-col justify-center items-center p-4 text-white">
        <div className="absolute top-0 left-0 p-4">
          <span className="text-white font-bold text-xl md:text-2xl tracking-wide">
            satopon
          </span>
        </div>

        <p className="text-gray-300 text-base md:text-lg mb-12 text-center max-w-xs md:max-w-md leading-relaxed drop-shadow-lg">
          Welcome to SATOPON.
        </p>

        <button
          onClick={handleStart}
          className="
            w-48 py-3.5
            bg-gradient-to-tr from-blue-500 to-indigo-600
            text-white font-semibold
            rounded-full shadow-xl
            hover:from-blue-600 hover:to-indigo-700
            transition-all duration-300 transform hover:scale-105 active:scale-95
            text-lg md:text-xl
            flex items-center justify-center gap-2
          "
          disabled={isAnimating} // Disable button during animation
        >
          <span className="material-symbols-outlined text-xl">
            rocket_launch
          </span>
          Get Started
        </button>

        <div className="mt-3 text-sm text-gray-400 text-center drop-shadow">
          Connect with Google
        </div>
      </div>
    </div>
  );
}


--- FILE: ./app/rooms/[roomId]/page.tsx ---

// app/rooms/[roomId]/page.tsx
"use client";

import { useParams, useRouter, usePathname } from "next/navigation";
import { useEffect, useState, useRef, useMemo } from "react";
import * as api from "@/lib/api";
import { auth } from "@/lib/firebaseClient";
import { onAuthStateChanged } from "firebase/auth";
import { usePresence } from "@/context/PresenceContext";

import {
  Scatter,
  Customized,
  ScatterChart,
  ResponsiveContainer,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  LineChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Line,
  Tooltip,
} from "recharts";

export default function RoomPage() {
  const { roomId } = useParams<{ roomId: string }>();
  const router = useRouter();
  const [historyModalTab, setHistoryModalTab] = useState<"Dashboard" | "Log">(
    "Dashboard"
  );
  const { sendEvent } = usePresence();
  const [token, setToken] = useState<string | null>(null);
  const [me, setMe] = useState<any>(null);
  const [room, setRoom] = useState<any>(null);
  const [userMap, setUserMap] = useState<
    Record<string, { display_name: string; icon_url?: string }>
  >({});
  const [pointHistory, setPointHistory] = useState<any[]>([]);
  const [myBalance, setMyBalance] = useState<number>(0);

  const [amountInput, setAmountInput] = useState<string>("");
  const [showApprovalSuccess, setShowApprovalSuccess] = useState(false);
  const [historyType, setHistoryType] = useState<"PON" | "SATO">("PON");
  const [balances, setBalances] = useState<Record<string, number>>({});
  const [joinQueue, setJoinQueue] = useState<string[]>([]);
  const [isRoundActive, setIsRoundActive] = useState(false);
  const [currentRoundId, setCurrentRoundId] = useState<string | null>(null);
  const [submittedBy, setSubmittedBy] = useState<Set<string>>(new Set());
  const [submissions, setSubmissions] = useState<Record<string, number>>({});
  const [finalTable, setFinalTable] = useState<Record<string, number> | null>(
    null
  );
  const [approvedBy, setApprovedBy] = useState<Set<string>>(new Set());
  const filteredHistory = pointHistory.filter((rec) =>
    rec.round_id.startsWith(historyType)
  );
  const [pendingReq, setPendingReq] = useState<{
    from_uid: string;
    amount: number;
  } | null>(null);
  const [settleInput, setSettleInput] = useState({ to_uid: "", amount: 0 });

  const [showPointModal, setShowPointModal] = useState(false);
  const [showHistoryModal, setShowHistoryModal] = useState(false);
  const [showSettleModal, setShowSettleModal] = useState(false);
  const [showSettingsModal, setShowSettingsModal] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");

  // state
  const [editName, setEditName] = useState("");
  const [editDesc, setEditDesc] = useState("");
  const [updating, setUpdating] = useState(false);

  const {
    wsReady,
    enterRoom,
    leaveRoom,
    onlineUsers: ctxOnlineUsers,
    onEvent,
  } = usePresence();
  // app/rooms/[roomId]/page.tsx

  // ... after the existing useState and useEffect hooks ...

  // --- ダッシュボード用グラフのデータ処理 ---
  const COLORS = [
    "#8884d8",
    "#82ca9d",
    "#ffc658",
    "#ff8042",
    "#00C49F",
    "#FFBB28",
    "#FF8042",
    "#0088FE",
    "#AF19FF",
    "#FF4560",
    "#775DD0",
    "#546E7A",
  ];

  // 既存のhistoryStatsのuseMemoをこのコードで置き換えてください

  // 既存の historyStats の useMemo をこちらのコードで置き換えてください
  const dashboardStats = useMemo(() => {
    // データが不十分な場合は、早期にデフォルト値を返す
    if (
      !pointHistory ||
      pointHistory.length === 0 ||
      !room?.members ||
      Object.keys(userMap).length === 0
    ) {
      return {
        winLossData: [],
        totalScoresData: [],
        totalPonRounds: 0,
        avgParticipantsLastMonth: "0.0",
        participationData: [],
        heatmapData: Array(7).fill(0),
        maxWinStreak: { uid: null, streak: 0, user: null },
        recent5Stats: { avgParticipants: "0.0", avgTotalPon: "0.0" },
      };
    }

    // 1. PON履歴のみを抽出し、時系列にソート
    const ponRounds = pointHistory
      .filter((r) => r.round_id.startsWith("PON"))
      .sort(
        (a, b) =>
          new Date(a.created_at).getTime() - new Date(b.created_at).getTime()
      );

    if (ponRounds.length === 0) {
      return {
        winLossData: [],
        totalScoresData: [],
        totalPonRounds: 0,
        avgParticipantsLastMonth: "0.0",
        participationData: [],
        heatmapData: Array(7).fill(0),
        maxWinStreak: { uid: null, streak: 0, user: null },
        recent5Stats: { avgParticipants: "0.0", avgTotalPon: "0.0" },
      };
    }

    // 2. ユーザーごとの基本統計を計算 (勝利数/敗北数, 総得点, 出場数)
    const userStats = room.members.map((member: { uid: string }) => {
      const stats = {
        uid: member.uid,
        name: userMap[member.uid]?.display_name || "Unknown",
        wins: 0,
        losses: 0,
        totalScore: 0,
        appearances: 0,
      };

      ponRounds.forEach((round) => {
        const participant = round.points.find((p: any) => p.uid === member.uid);
        if (participant) {
          stats.appearances++;
          stats.totalScore += participant.value;
          if (participant.value > 0) stats.wins++;
          else if (participant.value < 0) stats.losses++;
        }
      });
      return stats;
    });

    // グラフ用にデータを整形
    const winLossData = userStats.map(({ name, wins, losses }) => ({
      name,
      wins,
      losses,
    }));
    const totalScoresData = [...userStats].sort(
      (a, b) => b.totalScore - a.totalScore
    );
    const participationData = [...userStats].sort(
      (a, b) => b.appearances - a.appearances
    );

    // 3. 総試合回数 (PON)
    const totalPonRounds = ponRounds.length;

    // 4. 直近1ヶ月の平均参加人数
    const oneMonthAgo = new Date();
    oneMonthAgo.setDate(oneMonthAgo.getDate() - 30);
    const recentRoundsLastMonth = ponRounds.filter(
      (r) => new Date(r.created_at) > oneMonthAgo
    );
    const avgParticipantsLastMonth =
      recentRoundsLastMonth.length > 0
        ? (
            recentRoundsLastMonth.reduce(
              (sum, round) => sum + round.points.length,
              0
            ) / recentRoundsLastMonth.length
          ).toFixed(1)
        : "0.0";

    // 6. 曜日別の試合数ヒートマップ
    const heatmapData = Array(7).fill(0);
    ponRounds.forEach((r) => {
      const day = new Date(r.created_at).getDay(); // 0=Sun, 1=Mon, ..., 6=Sat
      heatmapData[day]++;
    });

    // 7. 連勝記録保持者
    let maxWinStreak = {
      uid: null as string | null,
      streak: 0,
      user: null as any,
    };
    room.members.forEach((member: { uid: string }) => {
      let currentStreak = 0;
      let memberMaxStreak = 0;
      ponRounds.forEach((round) => {
        const participant = round.points.find((p: any) => p.uid === member.uid);
        if (participant) {
          if (participant.value > 0) {
            currentStreak++;
          } else {
            memberMaxStreak = Math.max(memberMaxStreak, currentStreak);
            currentStreak = 0;
          }
        }
      });
      memberMaxStreak = Math.max(memberMaxStreak, currentStreak);

      if (memberMaxStreak > maxWinStreak.streak) {
        maxWinStreak = {
          uid: member.uid,
          streak: memberMaxStreak,
          user: userMap[member.uid],
        };
      }
    });

    // 8. 直近5試合の統計
    const last5PonRounds = [...ponRounds].reverse().slice(0, 5);
    let avgParticipants = "0.0";
    let avgTotalPon = "0.0";

    if (last5PonRounds.length > 0) {
      const totalParticipants = last5PonRounds.reduce(
        (sum, r) => sum + r.points.length,
        0
      );
      const totalPonVolume = last5PonRounds.reduce((sum, r) => {
        const roundTotal = r.points.reduce(
          (rSum: number, p: any) => rSum + Math.abs(p.value),
          0
        );
        return sum + roundTotal;
      }, 0);
      avgParticipants = (totalParticipants / last5PonRounds.length).toFixed(1);
      avgTotalPon = (totalPonVolume / last5PonRounds.length).toFixed(1);
    }

    return {
      winLossData,
      totalScoresData,
      totalPonRounds,
      avgParticipantsLastMonth,
      participationData,
      heatmapData,
      maxWinStreak,
      recent5Stats: { avgParticipants, avgTotalPon },
    };
  }, [pointHistory, room, userMap]);

  // Firebase ID token
  useEffect(() => {
    const unsub = onAuthStateChanged(auth, async (user) => {
      if (user) {
        const idToken = await user.getIdToken();
        setToken(idToken);
      } else {
        router.replace("/");
      }
    });
    return () => unsub();
  }, [router]);

  useEffect(() => {
    setEditName(room?.name || "");
    setEditDesc(room?.description || "");
  }, [room]);

  const pathname = usePathname();

  const prevPathRef = useRef<string>(pathname);
  useEffect(() => {
    if (
      prevPathRef.current.startsWith(`/rooms/${roomId}`) &&
      !pathname.startsWith(`/rooms/${roomId}`)
    ) {
      sendEvent({ type: "cancel_point_round", room_id: roomId });
      sendEvent({ type: "leave_room", room_id: roomId });
    }
    prevPathRef.current = pathname;
  }, [pathname, roomId, sendEvent]);

  useEffect(() => {
    return () => {
      if (!roomId) return;
      sendEvent({ type: "cancel_point_round", room_id: roomId });
      sendEvent({ type: "leave_room", room_id: roomId });
    };
  }, [roomId, sendEvent]);

  useEffect(() => {
    const onBeforeUnload = () => {
      if (!roomId) return;
      navigator.sendBeacon(
        `${process.env.NEXT_PUBLIC_WS_URL}/ws?token=${token}`,
        JSON.stringify({ type: "cancel_point_round", room_id: roomId })
      );
      navigator.sendBeacon(
        `${process.env.NEXT_PUBLIC_WS_URL}/ws?token=${token}`,
        JSON.stringify({ type: "leave_room", room_id: roomId })
      );
    };
    window.addEventListener("beforeunload", onBeforeUnload);
    return () => window.removeEventListener("beforeunload", onBeforeUnload);
  }, [roomId, token]);

  const handleUpdateRoom = async () => {
    setUpdating(true);
    try {
      await api.updateRoom(token, roomId, {
        name: editName.trim(),
        description: editDesc.trim(),
      });
      setRoom({ ...room, name: editName, description: editDesc });
      setShowSettingsModal(false);
    } catch (err: any) {
      setErrorMessage(err.message || "更新に失敗しました");
    } finally {
      setUpdating(false);
    }
  };

  useEffect(() => {
    if (!token) return;
    api
      .getMe(token)
      .then(setMe)
      .catch(() => router.replace("/"));
  }, [token, router]);

  useEffect(() => {
    if (!token) return;
    api
      .getListUsers(token)
      .then(
        (
          users: Array<{ uid: string; display_name: string; icon_url?: string }>
        ) => {
          const map: typeof userMap = {};
          users.forEach((u) => {
            map[u.uid] = { display_name: u.display_name, icon_url: u.icon_url };
          });
          setUserMap(map);
        }
      )
      .catch((err) => {
        console.error("Failed to fetch user list:", err);
      });
  }, [token]);

  useEffect(() => {
    if (!token || !roomId) return;
    (async () => {
      try {
        const [roomData, ph, sh] = await Promise.all([
          api.getRoom(token, roomId),
          api.getPointHistory(token, roomId),
          api.getSettlementHistory(token, roomId),
        ]);
        setRoom(roomData);
        setPointHistory(ph);
        setJoinQueue(roomData.pending_members?.map((m: any) => m.uid) || []);
      } catch {}
    })();
  }, [token, roomId]);

  useEffect(() => {
    if (!wsReady || !roomId) return;
    enterRoom(roomId);
    return () => leaveRoom(roomId);
  }, [wsReady, roomId, enterRoom, leaveRoom]);

  useEffect(() => {
    const bal: Record<string, number> = {};
    room?.members.forEach((m: any) => {
      bal[m.uid] = 0;
    });
    pointHistory.forEach((rec) => {
      rec.points.forEach((p: any) => {
        bal[p.uid] = (bal[p.uid] || 0) + p.value;
      });
    });
    setBalances(bal);
    if (me?.uid) setMyBalance(bal[me.uid] ?? 0);
  }, [pointHistory, room, me]);

  useEffect(() => {
    if (finalTable && room && approvedBy.size === onlineCount) {
      setShowApprovalSuccess(true);
      const timeout = setTimeout(() => {
        setShowApprovalSuccess(false);
        setShowPointModal(false);
      }, 1500); // 1.5秒で閉じる

      return () => clearTimeout(timeout);
    }
  }, [approvedBy.size, finalTable, room]);

  function cancelPointRound(reason?: string) {
    setIsRoundActive(false);
    setShowPointModal(false);
    setSubmittedBy(new Set());
    setSubmissions({});
    setFinalTable(null);
    setApprovedBy(new Set());
  }
  // 既存の他のフックが定義されている場所に追加

  // PONの累計スコア推移グラフ用のデータをメモ化
  const { ponData, memberColors } = useMemo(() => {
    const ponRounds = pointHistory
      .filter((r) => r.round_id.startsWith("PON"))
      .sort(
        (a, b) =>
          new Date(a.created_at).getTime() - new Date(b.created_at).getTime()
      );

    if (!room || ponRounds.length === 0)
      return { ponData: [], memberColors: {} };

    const memberUids = room.members.map((m: any) => m.uid);
    const memberColors = memberUids.reduce(
      (acc: Record<string, string>, uid: string, i: number) => {
        acc[uid] = COLORS[i % COLORS.length];
        return acc;
      },
      {}
    );

    const cumulativeScores: Record<string, number> = {};
    memberUids.forEach((uid: string) => (cumulativeScores[uid] = 0));

    const data = ponRounds.map((round, index) => {
      const roundData: any = {
        name: `Round ${index + 1}`,
        date: new Date(round.created_at).toLocaleDateString(),
      };
      round.points.forEach((p: { uid: string; value: number }) => {
        if (cumulativeScores[p.uid] !== undefined) {
          cumulativeScores[p.uid] += p.value;
        }
      });
      for (const uid in cumulativeScores) {
        roundData[uid] = cumulativeScores[uid];
      }
      return roundData;
    });

    return { ponData: data, memberColors };
  }, [pointHistory, room]);

  useEffect(() => {
    if (!me) return;
    const off = onEvent((ev) => {
      if (ev.room_id !== roomId) return;

      switch (ev.type) {
        case "join_request":
          setJoinQueue((q) => [...q, ev.applicant_uid]);
          break;
        case "join_approved":
        case "join_rejected":
          setJoinQueue((q) => q.filter((uid) => uid !== ev.applicant_uid));
          break;
        case "join_request_cancelled":
          setJoinQueue((q) => q.filter((uid) => uid !== ev.user_id));
          break;
        case "point_round_started":
          setShowPointModal(true);
          setIsRoundActive(true);
          setCurrentRoundId(ev.round_id);
          setSubmittedBy(new Set());
          setSubmissions({});
          setFinalTable(null);
          setApprovedBy(new Set());
          break;
        case "point_submitted":
          setSubmittedBy((s) => new Set(s).add(ev.uid));
          setSubmissions((s) => ({ ...s, [ev.uid]: ev.value }));
          break;
        case "point_final_table":
          setIsRoundActive(false);
          setFinalTable(ev.table);
          break;
        case "point_approved":
          setApprovedBy((s) => new Set(s).add(ev.uid));
          break;
        case "point_round_cancelled":
          cancelPointRound(ev.reason);
          break;
        case "settle_requested":
          if (ev.to_uid === me.uid) {
            setPendingReq({ from_uid: ev.from_uid, amount: ev.amount });
          }
          break;
        case "settle_rejected":
          if (ev.from_uid === me.uid) {
            const rejecter = userMap[ev.to_uid]?.display_name || ev.to_uid;
            alert(`${rejecter} さんに拒否されました`);
            setPendingReq(null);
            setSettleInput({ to_uid: "", amount: 0 });
            setAmountInput("");
          }
          break;
        case "settle_completed":
          break;
        default:
          break;
      }
    });
    return off;
  }, [onEvent, me, roomId, userMap]);

  if (!token || !me)
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mx-auto mb-4"></div>
                  <p className="text-gray-400">Loading…</p>
        </div>
      </div>
    );
  if (!room)
    return <p className="text-center mt-20 text-red-400">Room not found.</p>;

  const handleLeaveRoom = async () => {
    try {
      await api.leaveRoom(token, roomId);
      router.replace("/c420");
    } catch (err: any) {
      setErrorMessage(err.message || "退出に失敗しました。");
    }
  };

  const handleDecision = async (action: "approve" | "reject", uid: string) => {
    try {
      if (action === "approve") {
        await api.approveMember(token!, roomId!, uid);
      } else {
        await api.rejectMember(token!, roomId!, uid);
      }
    } catch (e: any) {
      console.error(`${action} に失敗:`, e);
      if (action === "approve") alert("承認に失敗しました");
    } finally {
      setJoinQueue((q) => q.filter((u) => u !== uid));
    }
  };
  const handleDeleteRoom = async () => {
    try {
      await api.deleteRoom(token, roomId);
      router.replace("/c420");
    } catch (err: any) {
      setErrorMessage(err.message || "ルーム削除に失敗しました。");
    }
  };

  if (!token || !me)
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mx-auto mb-4"></div>
                  <p className="text-gray-400">Loading…</p>
        </div>
      </div>
    );

  const myUid = me.uid;
  const onlineCount = ctxOnlineUsers[roomId]?.size || 0;
  const canStartRound = onlineCount >= 2;
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-black text-gray-100 flex flex-col relative overflow-hidden">
      {/* 背景エフェクト */}
      <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-pink-500/5 animate-pulse"></div>
      <div className="absolute top-0 left-0 w-full h-full bg-[radial-gradient(circle_at_50%_50%,rgba(120,119,198,0.1),transparent_50%)]"></div>

      {/* Header */}
      <header className="relative z-10 px-4 sm:px-8 py-4 backdrop-blur-lg bg-gray-900/70 border-b border-gray-700/50">
        <div className="max-w-[1150px] mx-auto flex items-center justify-between">
          {/* Back Button */}
          <button
            onClick={() => router.push("/c420")}
            className="p-2 rounded-lg hover:bg-gray-800/50 transition-all duration-200 hover:scale-105"
          >
            <span className="material-symbols-outlined text-white text-2xl">
              arrow_back
            </span>
          </button>

          {/* Title + Online Count */}
          <div className="flex flex-col items-center">
            <h1 className="text-xl sm:text-2xl font-bold tracking-wide bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              {room.name}
            </h1>
            <div className="flex items-center gap-2 mt-1">
              <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
              <span className="text-xs text-gray-400">
                {onlineCount} online
              </span>
            </div>
          </div>

          {/* Settings Button */}
          <button
            onClick={() => setShowSettingsModal(true)}
            className="p-2 rounded-lg hover:bg-gray-800/50 transition-all duration-200 hover:scale-105"
          >
            <span className="material-symbols-outlined text-white text-2xl">
              settings
            </span>
          </button>
        </div>
      </header>
      <div className="w-full">
        <main className="max-w-[1200px] mx-auto relative z-10 flex-grow overflow-auto px-4 sm:px-8 py-6">
          {/* Player Card */}
          <div className="relative mb-8">
            {/* background glow */}
            <div className="absolute inset-0 bg-gradient-to-r from-blue-600/20 via-purple-600/20 to-pink-600/20 rounded-3xl blur-xl" />

            {/* card container */}
            <div className="relative bg-gray-800/80 backdrop-blur-lg rounded-3xl p-4 sm:p-6 border border-gray-700/50">
              <div className="flex items-center flex-wrap sm:space-x-6">
                {/* avatar */}
                <div className="relative flex-shrink-0 mr-4">
                  <div className="absolute inset-0 rounded-full blur-md opacity-50 bg-gradient-to-r from-blue-400 to-purple-500" />
                  <div className="relative w-16 h-16 sm:w-28 sm:h-28 rounded-full bg-gradient-to-br from-blue-600 to-purple-700 border-4 border-gray-700 overflow-hidden flex items-center justify-center shadow-2xl">
                    {me.icon_url ? (
                      <img
                        src={me.icon_url}
                        alt="Your avatar"
                        className="w-full h-full object-cover rounded-full"
                      />
                    ) : (
                      <span className="text-3xl sm:text-5xl text-white font-bold">
                        {me.display_name.charAt(0).toUpperCase()}
                      </span>
                    )}
                  </div>
                </div>

                {/* stats */}
                <div className="flex-1">
                  <div className="grid grid-cols-2 gap-2 sm:flex sm:items-center sm:gap-3">
                    {/* balance */}
                    <div className="flex items-center gap-1 bg-gray-700/50 rounded-full px-3 py-3 text-sm">
                      <span className="material-symbols-outlined text-yellow-400 text-base">
                        monetization_on
                      </span>
                      <span
                        className={`font-semibold ${
                          myBalance > 0
                            ? "text-yellow-400"
                            : myBalance < 0
                              ? "text-red-500"
                              : "text-gray-300"
                        }`}
                      >
                        {myBalance.toLocaleString()}
                      </span>
                      <span className="text-xs text-gray-400">sato</span>
                    </div>

                    {/* rank */}
                    <div className="flex items-center gap-1 bg-gray-700/50 rounded-full px-3 py-3 text-sm">
                      <span className="material-symbols-outlined text-purple-400 text-base">
                        trending_up
                      </span>
                      <span className="font-semibold text-purple-400">
                        {(() => {
                          const sorted = Object.entries(balances).sort(
                            ([, a], [, b]) => b - a
                          );
                          return (
                            sorted.findIndex(([uid]) => uid === myUid)! + 1
                          );
                        })()}
                      </span>
                      <span className="text-xs text-gray-400">rank</span>
                    </div>

                    {/* wins */}
                    <div className="flex items-center gap-1 bg-gray-700/50 rounded-full px-3 py-3 text-sm">
                      <span className="material-symbols-outlined text-green-500 text-base">
                        Add
                      </span>
                      <span className="font-semibold text-green-500">
                        {(() => {
                          const pon = pointHistory.filter((r) =>
                            r.round_id.startsWith("PON")
                          );
                          const w = pon.reduce((c, rec) => {
                            const meP = rec.points.find((p) => p.uid === myUid);
                            return meP && meP.value > 0 ? c + 1 : c;
                          }, 0);
                          return `${w}/${pon.length}`;
                        })()}
                      </span>
                      <span className="text-xs text-gray-400">plus</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          {/* ゲームアクション */}
          <div className="grid grid-cols-3 gap-3 sm:gap-6 mb-8">
            {/* SATO */}
            <button
              onClick={() => canStartRound && setShowSettleModal(true)}
              disabled={!canStartRound}
              className={`group relative overflow-hidden rounded-2xl transition-all duration-300 transform hover:scale-105 ${
                canStartRound
                  ? "bg-gradient-to-br from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 shadow-lg hover:shadow-purple-500/25"
                  : "bg-gray-700/50 cursor-not-allowed opacity-50"
              }`}
            >
              <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
              <div className="relative flex flex-col items-center p-4 sm:p-6">
                <span className="material-symbols-outlined text-white text-2xl sm:text-3xl mb-2">
                  payments
                </span>
                <span className="text-sm sm:text-base font-bold text-white">
                  SATO
                </span>
              </div>
            </button>

            {/* History */}
            <button
              onClick={() => setShowHistoryModal(true)}
              className="group relative overflow-hidden rounded-2xl bg-gradient-to-br from-gray-700 to-gray-800 hover:from-gray-600 hover:to-gray-700 transition-all duration-300 transform hover:scale-105 shadow-lg"
            >
              <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
              <div className="relative flex flex-col items-center p-4 sm:p-6">
                <span className="material-symbols-outlined text-blue-400 text-2xl sm:text-3xl mb-2">
                  history
                </span>
                <span className="text-sm sm:text-base font-bold text-white">
                  History
                </span>
                <span className="text-xs text-gray-400 mt-1 hidden sm:block">
                  {
                    pointHistory.filter((r) => r.round_id.startsWith("PON"))
                      .length
                  }{" "}
                  games
                </span>
              </div>
            </button>

            {/* PON */}
            <button
              onClick={() => canStartRound && setShowPointModal(true)}
              disabled={!canStartRound}
              className={`group relative overflow-hidden rounded-2xl transition-all duration-300 transform hover:scale-105 ${
                canStartRound
                  ? isRoundActive
                    ? "bg-gradient-to-r from-indigo-500 via-purple-500 to-indigo-600 text-white ring-2 ring-purple-400 animate-pulse shadow-lg shadow-purple-500/50"
                    : "bg-gradient-to-br from-indigo-600 to-blue-600 hover:from-indigo-500 hover:to-blue-500 shadow-lg hover:shadow-indigo-500/25"
                  : "bg-gray-700/50 cursor-not-allowed opacity-50"
              }`}
            >
              <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
              <div className="relative flex flex-col items-center p-4 sm:p-6">
                <span className="material-symbols-outlined text-white text-2xl sm:text-3xl mb-2">
                  leaderboard
                </span>
                <span className="text-sm sm:text-base font-bold text-white">
                  {isRoundActive ? "Active" : "PON"}
                </span>
              </div>
            </button>
          </div>

          {/* 待機中のリクエスト */}
          {/* Members*/}
          {/* Leaderboard as Members (section and cards) */}
          <section>
            <h2 className="text-xl font-bold mb-4 flex items-center gap-2">
              <span className="material-symbols-outlined text-green-400">
                group
              </span>
              Members ({room.members.length})
            </h2>
            <div className="flex gap-3 overflow-x-auto pb-1 snap-x sm:grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 sm:overflow-visible sm:snap-none">
              {Object.entries(balances)
                .sort(([, a], [, b]) => b - a)
                .map(([uid, bal], idx) => {
                  const info = userMap[uid] || {
                    display_name: uid,
                    icon_url: undefined,
                  };
                  const online = ctxOnlineUsers[roomId]?.has(uid);
                  const isMe = uid === myUid;
                  return (
                    <div
                      key={uid}
                      className={`mt-2 relative flex-shrink-0 w-40 sm:w-auto snap-start bg-gray-800/50 backdrop-blur-lg rounded-2xl p-4 border border-gray-700/50 hover:border-gray-600/50 transition-all duration-300 ${
                        isMe ? "ring-2 ring-blue-500/50" : ""
                      }`}
                    >
                      {/* medal badge */}
                      {idx < 3 && (
                        <span
                          className={`
                material-symbols-outlined absolute top-2 left-2 text-2xl
                ${idx === 0 ? "text-yellow-400" : idx === 1 ? "text-gray-400" : "text-amber-200"}
              `}
                        >
                          {idx === 0
                            ? "trophy"
                            : idx === 1
                              ? "military_tech"
                              : "workspace_premium"}
                        </span>
                      )}

                      {/* online dot */}
                      <div
                        className={`absolute top-2 right-2 w-3 h-3 rounded-full border-2 border-gray-800 ${
                          online ? "bg-green-400" : "bg-gray-600"
                        }`}
                      />

                      <div className="flex flex-col items-center mt-4 text-center">
                        {/* avatar */}
                        <div className="w-16 h-16 rounded-full overflow-hidden bg-gray-700 flex items-center justify-center shadow-lg mb-2">
                          {info.icon_url ? (
                            <img
                              src={info.icon_url}
                              alt={info.display_name}
                              className="w-full h-full object-cover"
                            />
                          ) : (
                            <span className="text-xl font-bold text-white">
                              {info.display_name.charAt(0)}
                            </span>
                          )}
                        </div>
                        {/* name */}
                        <h3 className="w-full max-w-[5.5rem] truncate font-medium text-sm text-white mb-1">
                          {info.display_name}
                        </h3>
                        {/* score */}
                        <div
                          className={`px-3 py-1 rounded-full text-xs font-bold ${
                            bal > 0
                              ? "bg-yellow-500/20 text-yellow-400"
                              : bal < 0
                                ? "bg-red-500/20 text-red-400"
                                : "bg-gray-600/50 text-gray-300"
                          }`}
                        >
                          {bal.toLocaleString()}pt
                        </div>
                      </div>
                    </div>
                  );
                })}
            </div>
          </section>
        </main>
        {/* ポイントラウンドモーダル */}
      </div>
      {showPointModal && (
        <div className="fixed inset-0 bg-gradient-to-br from-black/60 via-black/50 to-purple-900/30 backdrop-blur-xl flex items-center justify-center z-50 animate-fade-in">
          <div className="w-full max-w-md bg-gradient-to-br from-gray-900/90 via-gray-800/80 to-gray-900/90 backdrop-blur-2xl rounded-3xl p-8 border border-gray-600/30 shadow-2xl transform animate-scale-up relative overflow-hidden">
            <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-bl from-yellow-400/10 to-transparent rounded-full blur-xl"></div>
            <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-blue-500/10 to-transparent rounded-full blur-xl"></div>

            <div className="relative z-10">
              <div className="flex justify-between items-center mb-6">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-xl flex items-center justify-center shadow-lg">
                    <span className="material-symbols-outlined text-white text-xl">
                      leaderboard
                    </span>
                  </div>
                  <h2 className="text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent tracking-wide">
                    PON
                  </h2>
                </div>

                <button
                  onClick={() => {
                    sendEvent({ type: "cancel_point_round", room_id: roomId });
                    cancelPointRound();
                  }}
                  className="w-10 h-10 flex items-center justify-center hover:bg-gray-700/60 rounded-xl transition-all duration-200 hover:scale-105 group"
                >
                  <span className="material-symbols-outlined text-gray-400 group-hover:text-white text-lg transition-colors">
                    close
                  </span>
                </button>
              </div>

              {!isRoundActive &&
                !finalTable &&
                (canStartRound ? (
                  <button
                    onClick={async () => {
                      cancelPointRound();
                      await api.startPointRound(token!, roomId!);
                    }}
                    className="w-full py-4 rounded-2xl bg-gradient-to-r from-blue-600 via-blue-700 to-indigo-700 hover:from-blue-500 hover:via-blue-600 hover:to-indigo-600 text-white font-semibold shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98] relative overflow-hidden group"
                  >
                    <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    <span className="relative flex items-center justify-center gap-2">
                      <span className="material-symbols-outlined">
                        play_arrow
                      </span>
                      PON
                    </span>
                  </button>
                ) : (
                  <div className="relative">
                    <button
                      disabled
                      className="w-full py-4 rounded-2xl bg-gradient-to-r from-gray-700/50 to-gray-600/50 text-gray-400 font-semibold shadow-inner cursor-not-allowed relative overflow-hidden"
                    >
                      <span className="flex items-center justify-center gap-2">
                        <span className="material-symbols-outlined opacity-50">
                          group
                        </span>
                        Start
                      </span>
                    </button>
                    <div className="absolute -top-1 left-1/2 transform -translate-x-1/2 bg-red-500/90 text-white text-xs px-3 py-1 rounded-full animate-pulse">
                      Need 2+ members
                    </div>
                  </div>
                ))}

              {isRoundActive && (
                <div className="space-y-6">
                  {/* プログレス表示 */}
                  <div className="bg-gray-800/40 rounded-2xl p-4 border border-gray-700/30">
                    <div className="flex justify-between items-center mb-3">
                      <p className="text-sm font-medium text-gray-300">
                        Progress
                      </p>
                      <p className="text-sm font-bold text-white tabular-nums">
                        {submittedBy.size} / {onlineCount}
                      </p>
                    </div>
                    <div className="w-full h-4 bg-gray-700/50 rounded-full overflow-hidden shadow-inner">
                      <div
                        className="h-full bg-gradient-to-r from-green-500 to-emerald-400 transition-all duration-700 ease-out rounded-full shadow-lg relative"
                        style={{
                          width: `${(submittedBy.size / onlineCount) * 100}%`,
                        }}
                      >
                        <div className="absolute inset-0 bg-white/20 rounded-full animate-pulse"></div>
                      </div>
                    </div>
                  </div>

                  {!submittedBy.has(me.uid) && (
                    <div className="bg-gradient-to-br from-gray-800/60 to-gray-900/60 rounded-2xl p-5 border border-gray-600/30">
                      <h3 className="text-white font-semibold mb-3 flex items-center gap-2">
                        <span className="material-symbols-outlined text-blue-400">
                          edit
                        </span>
                        Your Point
                      </h3>
                      <form
                        onSubmit={async (e) => {
                          e.preventDefault();
                          const formData = new FormData(e.currentTarget);
                          const value = Number(formData.get("point"));
                          if (!isNaN(value)) {
                            await api.submitPoint(
                              token!,
                              roomId!,
                              me.uid,
                              value
                            );
                          }
                        }}
                        className="flex items-center gap-3"
                      >
                        <div className="relative flex-1">
                          <input
                            type="number"
                            name="point"
                            placeholder="Enter points..."
                            className="w-full px-4 py-3 bg-gray-900/60 border border-gray-600/50 text-white rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500 transition-all duration-200 placeholder-gray-400"
                          />
                          <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-blue-500/10 to-purple-500/10 opacity-0 focus-within:opacity-100 transition-opacity duration-200 pointer-events-none"></div>
                        </div>
                        <button
                          type="submit"
                          className="flex items-center justify-center w-12 h-12 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-500 hover:to-emerald-500 text-white rounded-xl font-semibold transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl group"
                        >
                          <span className="material-symbols-outlined text-lg group-hover:rotate-12 transition-transform">
                            send
                          </span>
                        </button>
                      </form>
                    </div>
                  )}

                  {/* 提出済み状態 */}
                  {submittedBy.has(me.uid) && (
                    <div className="bg-gradient-to-r from-green-500/10 to-emerald-500/10 border border-green-500/30 rounded-2xl p-4 flex items-center gap-3">
                      <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center animate-pulse">
                        <span className="material-symbols-outlined text-white text-sm">
                          check
                        </span>
                      </div>
                      <span className="text-green-300 font-medium">
                        Submitted! Waiting for others...
                      </span>
                    </div>
                  )}

                  {/* Finalizeボタン（全員提出時のみ） */}
                  {submittedBy.size === onlineCount && (
                    <button
                      onClick={() => api.finalizePointRound(token!, roomId!)}
                      className="w-full py-4 bg-gradient-to-r from-indigo-600 via-purple-600 to-indigo-700 hover:from-indigo-500 hover:via-purple-500 hover:to-indigo-600 text-white rounded-2xl font-semibold transition-all duration-300 transform hover:scale-[1.02] shadow-xl hover:shadow-2xl relative overflow-hidden group animate-pulse"
                    >
                      <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                      <span className="relative flex items-center justify-center gap-2">
                        <span className="material-symbols-outlined">grade</span>
                        Finalize Round
                      </span>
                    </button>
                  )}
                </div>
              )}

              {finalTable && (
                <div className="space-y-3">
                  {/* 結果表示 */}
                  <div className="bg-gradient-to-br from-gray-800/60 to-gray-900/60 rounded-2xl p-5 border border-gray-600/30">
                    <h3 className="text-white font-bold text-xl mb-4 flex items-center gap-2">
                      <span className="material-symbols-outlined text-yellow-400">
                        trophy
                      </span>
                      Results
                    </h3>
                    <div
                      className={`
         ${
           Object.keys(finalTable).length > 3
             ? "max-h-60 overflow-y-auto space-y-2"
             : "space-y-2"
         }
      `}
                    >
                      {Object.entries(finalTable)
                        .sort((a, b) => b[1] - a[1]) // スコア順にソート
                        .map(([uid, v], i) => (
                          <div
                            key={uid}
                            className={`
             flex-shrink-0 flex justify-between items-center px-4 py-3 rounded-xl
              transition-all duration-300 transform hover:scale-[1.01] relative overflow-hidden
              ${
                i === 0
                  ? "bg-gradient-to-r from-yellow-500/20 to-amber-500/20 border border-yellow-400/40 text-yellow-300 shadow-lg"
                  : i === 1
                    ? "bg-gradient-to-r from-gray-400/10 to-gray-500/10 border border-gray-400/30 text-gray-200"
                    : i === 2
                      ? "bg-gradient-to-r from-amber-600/10 to-orange-600/10 border border-amber-600/30 text-amber-200"
                      : "bg-gray-700/40 border border-gray-600/20 text-gray-300"
              }
            `}
                            style={{
                              ...(Object.keys(finalTable).length >= 4
                                ? { minWidth: 200 }
                                : {}),
                            }}
                          >
                            {i === 0 && (
                              <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-bl from-yellow-400/20 to-transparent rounded-full blur-xl"></div>
                            )}
                            <div className="flex items-center gap-3 relative z-10">
                              {i < 3 && (
                                <span className="material-symbols-outlined text-lg">
                                  {i === 0
                                    ? "trophy"
                                    : i === 1
                                      ? "military_tech"
                                      : "workspace_premium"}
                                </span>
                              )}
                              {/* ← new avatar + display_name */}
                              {userMap[uid]?.icon_url ? (
                                <img
                                  src={userMap[uid].icon_url}
                                  alt={userMap[uid].display_name}
                                  className="w-6 h-6 rounded-full"
                                />
                              ) : (
                                <div className="w-6 h-6 bg-gray-700 rounded-full flex items-center justify-center text-xs text-white">
                                  {userMap[uid]?.display_name.charAt(0)}
                                </div>
                              )}
                              <span className="font-medium truncate max-w-[8rem]">
                                {userMap[uid]?.display_name || uid}
                              </span>
                            </div>
                            <span className="font-bold tabular-nums text-lg relative z-10 flex items-center gap-1">
                              {v}
                              <span className="text-sm opacity-80">pt</span>
                            </span>
                          </div>
                        ))}
                    </div>
                  </div>

                  <div className="bg-gradient-to-br from-indigo-900/40 to-purple-900/40 rounded-2xl p-5 border border-indigo-500/20">
                    <div className="space-y-4">
                      <div>
                        <div className="flex justify-between items-center mb-2">
                          <p className="text-sm font-medium text-indigo-300">
                            Approved
                          </p>
                          <p className="text-sm font-bold text-white tabular-nums">
                            {approvedBy.size} / {onlineCount}
                          </p>
                        </div>
                        <div className="w-full h-4 bg-gray-700/50 rounded-full overflow-hidden shadow-inner">
                          <div
                            className="h-full bg-gradient-to-r from-indigo-500 to-purple-500 transition-all duration-700 ease-out rounded-full shadow-lg relative"
                            style={{
                              width: `${(approvedBy.size / onlineCount) * 100}%`,
                            }}
                          >
                            <div className="absolute inset-0 bg-white/20 rounded-full animate-pulse"></div>
                          </div>
                        </div>
                      </div>

                      {/* 自分の承認ボタン（未承認時） */}
                      {!approvedBy.has(me.uid) && (
                        <button
                          onClick={() =>
                            api.approvePoint(token!, roomId!, currentRoundId!)
                          }
                          className="w-full py-4 bg-gradient-to-r from-indigo-600 via-blue-600 to-indigo-700 hover:from-indigo-500 hover:via-blue-500 hover:to-indigo-600 text-white rounded-xl font-semibold transition-all duration-300 transform hover:scale-[1.02] shadow-lg hover:shadow-xl relative overflow-hidden group"
                        >
                          <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                          <span className="relative flex items-center justify-center gap-2">
                            <span className="material-symbols-outlined">
                              thumb_up
                            </span>
                            Approve
                          </span>
                        </button>
                      )}

                      {/* 承認済み状態 */}
                      {approvedBy.has(me.uid) && (
                        <div className="bg-gradient-to-r from-green-500/10 to-emerald-500/10 border border-green-500/30 rounded-xl p-4 flex items-center gap-3">
                          <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                            <span className="material-symbols-outlined text-white text-sm">
                              verified
                            </span>
                          </div>
                          <span className="text-green-300 font-medium">
                            You've approved these results
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {showApprovalSuccess && (
        <div className="absolute inset-0 bg-gradient-to-br from-black/80 via-green-900/20 to-black/80 backdrop-blur-lg flex flex-col items-center justify-center rounded-3xl z-50">
          <div className="relative">
            <div className="absolute inset-0 w-20 h-20 bg-green-400/30 rounded-full animate-ping"></div>
            <div className="relative w-16 h-16 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center shadow-2xl">
              <span className="material-symbols-outlined text-white text-3xl animate-bounce">
                check_circle
              </span>
            </div>
          </div>
          <p className="text-white text-xl font-bold mt-4 animate-fade-in-up">
            All Approved!
          </p>
          <p
            className="text-green-300 text-sm mt-1 animate-fade-in-up"
            style={{ animationDelay: "0.2s" }}
          >
            PON completed successfully
          </p>
        </div>
      )}

      {showHistoryModal && (
        <div className="z-10 fixed inset-0 w-screen h-screen bg-black/90 backdrop-blur-sm flex flex-col overflow-hidden">
          <div className="w-full h-full bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 shadow-2xl flex flex-col overflow-hidden border border-slate-700/50">
            {/* Enhanced Modal Header */}
            <header className="flex-shrink-0 bg-gradient-to-r from-slate-800/90 to-slate-700/90 backdrop-blur-md p-3 sm:p-4 border-b border-slate-600/40 flex items-center justify-between">
              <div className="flex items-center gap-2 sm:gap-4">
                <div className="flex items-center gap-1 sm:gap-2 bg-slate-700/60 backdrop-blur-sm p-1 rounded-lg sm:p-1.5 rounded-xl border border-slate-600/30">
                  <button
                    onClick={() => setHistoryModalTab("Dashboard")}
                    className={`relative flex items-center justify-center px-3 py-2 text-xs sm:px-4 sm:py-2.5 sm:text-sm font-semibold rounded-md sm:rounded-lg transition-all duration-300 ${
                      historyModalTab === "Dashboard"
                        ? "bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg shadow-indigo-500/25 transform scale-105"
                        : "text-slate-300 hover:bg-slate-600/50 hover:text-white"
                    }`}
                    title="Dashboard" // Tooltip for mobile
                  >
                    <span className="material-symbols-outlined text-base sm:text-sm mr-0 sm:mr-2">
                      dashboard
                    </span>
                    <span className="hidden sm:inline">Dashboard</span>
                  </button>
                  <button
                    onClick={() => setHistoryModalTab("Log")}
                    className={`relative flex items-center justify-center px-3 py-2 text-xs sm:px-4 sm:py-2.5 sm:text-sm font-semibold rounded-md sm:rounded-lg transition-all duration-300 ${
                      historyModalTab === "Log"
                        ? "bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg shadow-indigo-500/25 transform scale-105"
                        : "text-slate-300 hover:bg-slate-600/50 hover:text-white"
                    }`}
                    title="Transaction Log" // Tooltip for mobile
                  >
                    <span className="material-symbols-outlined text-base sm:text-sm mr-0 sm:mr-2">
                      history
                    </span>
                    <span className="hidden sm:inline">Transaction Log</span>
                  </button>
                </div>
              </div>
              <button
                onClick={() => setShowHistoryModal(false)}
                className="w-10 h-10 sm:w-12 sm:h-12 flex items-center justify-center rounded-full bg-slate-700/50 hover:bg-red-500/20 border border-slate-600/30 hover:border-red-500/50 transition-all duration-300 group"
              >
                <span className="material-symbols-outlined text-slate-300 group-hover:text-red-400 transition-colors text-xl sm:text-2xl">
                  close
                </span>
              </button>
            </header>

            {/* Content Body */}
            <main className="flex-1 overflow-y-auto scrollbar-hide overflow-x-hidden p-4 sm:p-6">
              {historyModalTab === "Dashboard" &&
                (() => {
                  const stats = dashboardStats;

                  // グラフのカスタムツールチップ
                  const CustomTooltip = ({ active, payload, label }: any) => {
                    if (active && payload && payload.length) {
                      // ツールチップに表示するユーザー情報を特定
                      const user =
                        Object.values(userMap).find(
                          (u) => u.display_name === label
                        ) || null;

                      return (
                        <div className="rounded-xl border border-slate-600 bg-slate-800/80 p-3 shadow-lg backdrop-blur-md">
                          <div className="flex items-center gap-2 mb-2">
                            {user?.icon_url ? (
                              <img
                                src={user.icon_url}
                                alt={label}
                                className="w-6 h-6 rounded-full"
                              />
                            ) : (
                              <div className="w-6 h-6 grid place-items-center rounded-full bg-slate-700 text-xs font-bold">
                                {label.charAt(0)}
                              </div>
                            )}
                            <p className="font-bold text-white">{label}</p>
                          </div>
                          {payload.map((pld: any, i: number) => (
                            <div
                              key={i}
                              style={{ color: pld.fill }}
                              className="flex items-center justify-between gap-4 text-sm"
                            >
                              <span>{pld.name}:</span>
                              <span className="font-semibold">
                                {pld.value.toLocaleString()}
                              </span>
                            </div>
                          ))}
                        </div>
                      );
                    }
                    return null;
                  };

                  const AvatarYTicks = (props: any) => {
                    const { x, y, payload } = props;
                    const userName = payload.value;
                    const user = room.members.find(
                      (m: any) => userMap[m.uid]?.display_name === userName
                    );
                    const userInfo = user ? userMap[user.uid] : null;

                    return (
                      <g transform={`translate(${x - 45},${y - 16})`}>
                        <foreignObject width="40" height="40">
                          {userInfo?.icon_url ? (
                            <img
                              src={userInfo.icon_url}
                              alt={userName}
                              className="w-8 h-8 rounded-full object-cover"
                            />
                          ) : (
                            <div className="w-8 h-8 grid place-items-center rounded-full bg-slate-700 text-sm font-bold text-white">
                              {userName.charAt(0)}
                            </div>
                          )}
                        </foreignObject>
                      </g>
                    );
                  };

                  if (stats.totalPonRounds === 0) {
                    return (
                      <div className="flex h-full w-full items-center justify-center">
                        <div className="text-center">
                          <span className="material-symbols-outlined text-6xl text-gray-600">
                            sentiment_dissatisfied
                          </span>
                          <p className="mt-4 text-xl font-semibold text-gray-400">
                            No Data to Display
                          </p>
                          <p className="text-sm text-gray-500">
                            Play a PON round to see statistics.
                          </p>
                        </div>
                      </div>
                    );
                  }

                  return (
                    <div className="grid grid-cols-1 grid-rows-[auto] gap-4 sm:gap-6 lg:grid-cols-4 xl:grid-cols-5 animate-slide-in-up">
                      {/* --- Hero Stat: Win Streak --- */}
                      {stats.maxWinStreak.uid && stats.maxWinStreak.user && (
                        <div className="group relative overflow-hidden rounded-xl border border-amber-400/30 bg-gradient-to-br from-gray-900 via-gray-900 to-amber-900/50 p-5 shadow-2xl shadow-amber-900/50 transition-all duration-300 lg:col-span-4 xl:col-span-3">
                          <div className="flex items-center gap-5">
                            <span className="material-symbols-outlined text-6xl text-amber-400 drop-shadow-[0_0_10px_rgba(251,191,36,0.5)] transition-transform duration-300 group-hover:scale-110">
                              local_fire_department
                            </span>
                            <div className="w-full">
                              <h3 className="text-sm font-semibold uppercase tracking-wider text-amber-300">
                                Longest Win Streak
                              </h3>
                              <div className="mt-2 flex flex-wrap items-center gap-x-4">
                                {stats.maxWinStreak.user.icon_url ? (
                                  <img
                                    src={stats.maxWinStreak.user.icon_url}
                                    alt={stats.maxWinStreak.user.display_name}
                                    className="h-12 w-12 rounded-full border-2 border-amber-400 object-cover"
                                  />
                                ) : (
                                  <div className="flex h-12 w-12 items-center justify-center rounded-full bg-amber-500 font-bold text-white">
                                    {stats.maxWinStreak.user.display_name.charAt(
                                      0
                                    )}
                                  </div>
                                )}
                                <p className="truncate text-2xl font-bold text-white">
                                  {stats.maxWinStreak.user.display_name}
                                </p>
                              </div>
                            </div>
                            <div className="flex-shrink-0 text-right">
                              <p className="text-6xl font-black text-amber-400">
                                {stats.maxWinStreak.streak}
                              </p>
                              <p className="font-bold text-white">WINS</p>
                            </div>
                          </div>
                        </div>
                      )}

                      {/* --- Summary Cards --- */}
                      <div className="group relative rounded-xl border border-gray-700/80 bg-gray-800/50 p-5 shadow-lg transition-all hover:border-indigo-400/50 hover:bg-gray-800/80 lg:col-span-2 xl:col-span-2">
                        <h3 className="flex items-center gap-2 text-sm font-medium text-gray-400">
                          <span className="material-symbols-outlined text-base">
                            casino
                          </span>{" "}
                          Total PON Rounds
                        </h3>
                        <p className="font-mono text-5xl font-extrabold text-white mt-2">
                          {stats.totalPonRounds}
                        </p>
                      </div>

                      {/* --- Wins / Losses Chart --- */}
                      <div className="group relative rounded-xl border border-gray-700/80 bg-gray-800/50 p-5 shadow-lg transition-all hover:border-indigo-400/50 hover:bg-gray-800/80 lg:col-span-2 xl:col-span-3 min-h-[350px]">
                        <h3 className="text-base font-semibold text-white">
                          Wins / Losses
                        </h3>
                        <ResponsiveContainer width="100%" height="90%">
                          <BarChart
                            data={stats.winLossData}
                            layout="vertical"
                            margin={{ top: 20, right: 20, left: 30, bottom: 5 }}
                            barCategoryGap="35%"
                          >
                            <CartesianGrid
                              stroke="#4b5563"
                              strokeDasharray="3 3"
                              horizontal={false}
                            />
                            <XAxis
                              type="number"
                              stroke="#9ca3af"
                              tick={{ fill: "#9ca3af", fontSize: 12 }}
                              allowDecimals={false}
                            />
                            {/* ★修正点1: Y軸にAvatarYTicksを適用 */}
                            <YAxis
                              type="category"
                              dataKey="name"
                              width={60}
                              tickLine={false}
                              axisLine={false}
                              tick={<AvatarYTicks />}
                            />
                            <Tooltip
                              content={<CustomTooltip />}
                              cursor={{ fill: "rgba(129, 140, 248, 0.1)" }}
                            />
                            <Bar
                              dataKey="wins"
                              fill="#3b82f6"
                              name="Wins"
                              radius={[0, 8, 8, 0]}
                            />
                            <Bar
                              dataKey="losses"
                              fill="#ef4444"
                              name="Losses"
                              radius={[0, 8, 8, 0]}
                            />
                          </BarChart>
                        </ResponsiveContainer>
                      </div>

                      {/* --- Total Score Chart --- */}
                      <div className="group relative rounded-xl border border-gray-700/80 bg-gray-800/50 p-5 shadow-lg transition-all hover:border-indigo-400/50 hover:bg-gray-800/80 lg:col-span-2 min-h-[350px]">
                        <h3 className="text-base font-semibold text-white">
                          Total Score Ranking
                        </h3>
                        <ResponsiveContainer width="100%" height="90%">
                          <BarChart
                            data={stats.totalScoresData}
                            layout="vertical"
                            margin={{ top: 20, right: 30, left: 30, bottom: 5 }}
                            barCategoryGap="35%"
                          >
                            <CartesianGrid
                              stroke="#4b5563"
                              strokeDasharray="3 3"
                              horizontal={false}
                            />
                            <XAxis
                              type="number"
                              stroke="#9ca3af"
                              tick={{ fill: "#9ca3af", fontSize: 12 }}
                            />
                            {/* ★修正点1: Y軸にAvatarYTicksを適用 */}
                            <YAxis
                              type="category"
                              dataKey="name"
                              width={60}
                              tickLine={false}
                              axisLine={false}
                              tick={<AvatarYTicks />}
                            />
                            <Tooltip
                              content={<CustomTooltip />}
                              cursor={{ fill: "rgba(129, 140, 248, 0.1)" }}
                            />
                            <Bar
                              dataKey="totalScore"
                              name="Score"
                              radius={[0, 8, 8, 0]}
                            >
                              {stats.totalScoresData.map((entry, index) => (
                                <Cell
                                  key={`cell-${index}`}
                                  fill={
                                    entry.totalScore >= 0
                                      ? "#22c55e"
                                      : "#f87171"
                                  }
                                />
                              ))}
                            </Bar>
                          </BarChart>
                        </ResponsiveContainer>
                      </div>

                      {/* --- Participation Chart --- */}
                      {/* --- Participation Chart --- */}
                      <div className="group relative rounded-xl border border-gray-700/80 bg-gray-800/50 p-5 shadow-lg transition-all hover:border-indigo-400/50 hover:bg-gray-800/80 lg:col-span-2 xl:col-span-3 min-h-[300px]">
                        <h3 className="text-base font-semibold text-white">
                          Participation Ranking
                        </h3>
                        <ResponsiveContainer width="100%" height="90%">
                          {/* ★修正点: X軸にアバターを表示するため、bottomマージンを確保 */}
                          <BarChart
                            data={stats.participationData}
                            margin={{ top: 20, right: 30, left: 0, bottom: 20 }}
                          >
                            <CartesianGrid
                              stroke="#4b5563"
                              strokeDasharray="3 3"
                              vertical={false}
                            />

                            {/* ★修正点: X軸にAvatarXTicksを適用 */}
                            <XAxis
                              dataKey="name"
                              height={40}
                              tickLine={false}
                              axisLine={false}
                              tick={(props) => {
                                const { x, y, payload } = props;
                                const userName = payload.value;
                                const user = room.members.find(
                                  (m: any) =>
                                    userMap[m.uid]?.display_name === userName
                                );
                                const userInfo = user
                                  ? userMap[user.uid]
                                  : null;

                                return (
                                  <g
                                    transform={`translate(${x - 16},${y + 10})`}
                                  >
                                    <foreignObject width="32" height="32">
                                      {userInfo?.icon_url ? (
                                        <img
                                          src={userInfo.icon_url}
                                          alt={userName}
                                          className="w-8 h-8 rounded-full object-cover"
                                        />
                                      ) : (
                                        <div className="w-8 h-8 grid place-items-center rounded-full bg-slate-700 text-sm font-bold text-white">
                                          {userName.charAt(0)}
                                        </div>
                                      )}
                                    </foreignObject>
                                  </g>
                                );
                              }}
                            />
                            <YAxis
                              stroke="#9ca3af"
                              tick={{ fill: "#9ca3af", fontSize: 12 }}
                              allowDecimals={false}
                            />
                            <Tooltip
                              content={<CustomTooltip />}
                              cursor={{ fill: "rgba(129, 140, 248, 0.1)" }}
                            />
                            <Bar
                              dataKey="appearances"
                              name="Rounds Played"
                              fill="#a855f7"
                              radius={[8, 8, 0, 0]}
                            />
                          </BarChart>
                        </ResponsiveContainer>
                      </div>

                      {/* --- Activity Section --- */}
                      <div className="group relative rounded-xl border border-gray-700/80 bg-gray-800/50 p-5 shadow-lg transition-all hover:border-indigo-400/50 hover:bg-gray-800/80 lg:col-span-2 min-h-[300px] flex flex-col justify-between">
                        <div>
                          <h3 className="text-base font-semibold text-white">
                            Weekly Activity
                          </h3>
                          {/* ★修正点2: ヒートマップに数値を表示 */}
                          <div className="mt-4 grid grid-cols-7 gap-1.5 sm:gap-2">
                            {["S", "M", "T", "W", "T", "F", "S"].map(
                              (day, index) => {
                                const count = stats.heatmapData[index];
                                const maxCount = Math.max(
                                  ...stats.heatmapData,
                                  1
                                );
                                const opacity =
                                  count > 0
                                    ? 0.2 + (count / maxCount) * 0.8
                                    : 0.1;
                                return (
                                  <div
                                    key={index}
                                    className="flex flex-col items-center gap-2"
                                    title={`${count} rounds on ${day}`}
                                  >
                                    <div
                                      className="relative grid h-20 w-full place-items-center rounded-md bg-indigo-500 transition-all duration-300"
                                      style={{ opacity }}
                                    >
                                      {count > 0 && (
                                        <span className="font-bold text-white text-lg drop-shadow-md">
                                          {count}
                                        </span>
                                      )}
                                    </div>
                                    <span className="text-xs text-gray-500">
                                      {day}
                                    </span>
                                  </div>
                                );
                              }
                            )}
                          </div>
                        </div>
                        <div className="mt-6 space-y-3">
                          <h3 className="text-base font-semibold text-white">
                            Quick Stats (Last 5)
                          </h3>
                          <div className="flex items-center justify-between rounded-lg bg-gray-900/60 p-3">
                            <p className="text-sm text-gray-300">Avg Players</p>
                            <p className="font-mono text-lg font-bold text-white">
                              {stats.recent5Stats.avgParticipants}
                            </p>
                          </div>
                          <div className="flex items-center justify-between rounded-lg bg-gray-900/60 p-3">
                            <p className="text-sm text-gray-300">
                              Avg Total PON
                            </p>
                            <p className="font-mono text-lg font-bold text-white">
                              {stats.recent5Stats.avgTotalPon}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })()}
              {historyModalTab === "Log" && (
                <>
                  {/* Tab Navigation */}
                  <div className="sticky top-0 z-10 bg-gray-800/4 max-w-3xl mx-auto   py-3 backdrop-blur-md sm:px-6 sm:py-4">
                    <div className="flex space-x-2 sm:space-x-4">
                      {["PON", "SATO"].map((type) => (
                        <button
                          key={type}
                          onClick={() => setHistoryType(type as "PON" | "SATO")}
                          className={`relative rounded-md px-3 py-2 text-sm font-bold transition-all duration-300 sm:px-4 ${
                            historyType === type
                              ? "bg-slate-700 text-white"
                              : "text-slate-400 hover:bg-slate-800 hover:text-slate-200"
                          }`}
                        >
                          {type}
                          {historyType === type && (
                            <span className="absolute -bottom-1 left-0 w-full h-1 bg-gradient-to-r from-indigo-500 to-fuchsia-500 rounded-full" />
                          )}
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Log Content */}
                  <div className="space-y-4 px-1 pt-4 sm:space-y-6 sm:px-2">
                    {filteredHistory.length === 0 ? (
                      <div className="flex flex-col items-center py-20 text-center">
                        <div className="relative grid h-24 w-24 place-items-center">
                          <div className="absolute inset-0 rounded-full bg-gradient-to-br from-indigo-500/20 to-fuchsia-500/20 blur-2xl"></div>
                          <span className="material-symbols-outlined text-6xl text-slate-500">
                            receipt_long
                          </span>
                        </div>
                        <p className="mt-4 text-lg font-semibold text-slate-300">
                          No History Available
                        </p>
                        <p className="text-sm text-slate-500">
                          Game and transaction records will appear here.
                        </p>
                      </div>
                    ) : (
                      [...filteredHistory]
                        .sort(
                          (a, b) =>
                            new Date(b.created_at).getTime() -
                            new Date(a.created_at).getTime()
                        )
                        .map((rec, animIdx) => {
                          // SATO Log Card
                          if (historyType === "SATO") {
                            const sender = rec.points.find(
                              (p: any) => p.value > 0
                            )!;
                            const receiver = rec.points.find(
                              (p: any) => p.value < 0
                            )!;
                            const amount = sender ? Math.abs(sender.value) : 0;
                            if (!sender || !receiver) return null;

                            return (
                              <div
                                key={rec.round_id}
                                className="animate-slide-in-up"
                                style={{ animationDelay: `${animIdx * 50}ms` }}
                              >
                                <div className="group mx-auto max-w-4xl rounded-2xl border border-slate-700/50 bg-gradient-to-br from-slate-800/80 to-slate-900/50 p-3 shadow-lg transition-all duration-300 hover:border-fuchsia-500/50 hover:shadow-2xl hover:shadow-fuchsia-500/10 sm:p-4">
                                  {/* Card Header */}
                                  <div className="mb-3 flex items-center justify-between px-1">
                                    <div className="flex items-center gap-2">
                                      <div className="grid h-8 w-8 place-items-center rounded-lg bg-gradient-to-br from-fuchsia-600/30 to-purple-600/30 border border-fuchsia-500/30">
                                        <span className="material-symbols-outlined text-fuchsia-300 text-base">
                                          payments
                                        </span>
                                      </div>
                                      <span className="font-mono text-xs font-bold text-fuchsia-300 sm:text-sm">
                                        {rec.round_id}
                                      </span>
                                    </div>
                                    {/* ★修正点1: 秒単位まで表示 */}
                                    <span className="text-xs text-slate-400">
                                      {new Date(rec.created_at).toLocaleString(
                                        "ja-JP",
                                        {
                                          year: "numeric",
                                          month: "2-digit",
                                          day: "2-digit",
                                          hour: "2-digit",
                                          minute: "2-digit",
                                          second: "2-digit",
                                          hour12: false,
                                        }
                                      )}
                                    </span>
                                  </div>

                                  {/* SATO Body */}
                                  <div className="flex w-full items-center gap-1 rounded-xl bg-slate-900/60 p-2 sm:gap-3 sm:p-3">
                                    {/* Sender */}
                                    <div className="flex flex-1 items-center gap-2 min-w-0">
                                      {/* ★修正点2: flex-shrink-0 を追加 */}
                                      {userMap[sender.uid]?.icon_url ? (
                                        <img
                                          src={userMap[sender.uid].icon_url}
                                          alt=""
                                          className="h-10 w-10 flex-shrink-0 rounded-full object-cover border-2 border-slate-600 sm:h-12 sm:w-12"
                                        />
                                      ) : (
                                        <div className="grid h-10 w-10 flex-shrink-0 place-items-center rounded-full bg-slate-700 font-bold text-white sm:h-12 sm:w-12 sm:text-lg">
                                          {userMap[
                                            sender.uid
                                          ]?.display_name.charAt(0)}
                                        </div>
                                      )}
                                      <p className="truncate text-sm font-medium text-slate-200">
                                        {userMap[sender.uid]?.display_name}
                                      </p>
                                    </div>

                                    {/* Arrow & Amount */}
                                    <div className="flex flex-shrink-0 items-center gap-1 rounded-full bg-slate-800/70 p-1 sm:gap-2">
                                      <span className="material-symbols-outlined text-lg text-fuchsia-400 sm:text-xl">
                                        arrow_forward
                                      </span>
                                      <div className="rounded-full bg-amber-400/10 px-2 py-1 border border-amber-400/20 sm:px-3">
                                        <span className="text-sm font-bold text-amber-300">
                                          {amount.toLocaleString()}
                                        </span>
                                      </div>
                                    </div>

                                    {/* Receiver */}
                                    <div className="flex flex-1 items-center justify-end gap-2 min-w-0 text-right">
                                      <p className="truncate text-sm font-medium text-slate-200">
                                        {userMap[receiver.uid]?.display_name}
                                      </p>
                                      {/* ★修正点2: flex-shrink-0 を追加 */}
                                      {userMap[receiver.uid]?.icon_url ? (
                                        <img
                                          src={userMap[receiver.uid].icon_url}
                                          alt=""
                                          className="h-10 w-10 flex-shrink-0 rounded-full object-cover border-2 border-slate-600 sm:h-12 sm:w-12"
                                        />
                                      ) : (
                                        <div className="grid h-10 w-10 flex-shrink-0 place-items-center rounded-full bg-slate-700 font-bold text-white sm:h-12 sm:w-12 sm:text-lg">
                                          {userMap[
                                            receiver.uid
                                          ]?.display_name.charAt(0)}
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            );
                          }

                          // PON Log Card
                          return (
                            <div
                              key={rec.round_id}
                              className="animate-slide-in-up"
                              style={{ animationDelay: `${animIdx * 50}ms` }}
                            >
                              <div className="mx-auto max-w-3xl rounded-2xl border border-slate-700/50 bg-slate-800/50 p-4 shadow-lg transition-all duration-300 hover:border-indigo-500/50 hover:shadow-indigo-500/10 sm:p-5">
                                {/* Card Header */}
                                <div className="mb-4 flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                                  <div className="flex items-center gap-2">
                                    <div className="grid h-8 w-8 place-items-center rounded-lg bg-gradient-to-br from-indigo-600/30 to-blue-600/30 border border-indigo-500/30">
                                      <span className="material-symbols-outlined text-indigo-300 text-base">
                                        leaderboard
                                      </span>
                                    </div>
                                    <span className="font-mono text-xs font-bold text-indigo-300 sm:text-sm">
                                      {rec.round_id}
                                    </span>
                                  </div>
                                  <div className="flex items-center justify-between gap-2">
                                    <div className="flex items-center gap-1 rounded-full bg-slate-700/80 px-2 py-1 text-xs text-slate-300">
                                      <span className="material-symbols-outlined text-sm">
                                        groups
                                      </span>
                                      <span>{rec.points.length}</span>
                                    </div>
                                    <span className="text-xs text-slate-400">
                                      {new Date(rec.created_at).toLocaleString(
                                        "ja-JP"
                                      )}
                                    </span>
                                  </div>
                                </div>
                                {/* PON Body */}
                                <div className="space-y-2 rounded-xl bg-slate-900/50 p-2 sm:p-4">
                                  {rec.points
                                    .sort((a: any, b: any) => b.value - a.value)
                                    .map((p: any, idx: number) => (
                                      <div
                                        key={p.uid}
                                        className={`flex items-center justify-between rounded-lg p-2 transition-all duration-300 sm:p-3 ${
                                          idx === 0
                                            ? "bg-amber-400/10"
                                            : "bg-slate-800/50 hover:bg-slate-700/50"
                                        }`}
                                      >
                                        <div className="flex min-w-0 items-center gap-2 sm:gap-3">
                                          <div className="flex-shrink-0 text-center sm:w-6">
                                            {idx < 3 ? (
                                              <span
                                                className={`material-symbols-outlined text-lg ${idx === 0 ? "text-amber-400" : idx === 1 ? "text-slate-300" : "text-orange-400"}`}
                                              >
                                                {idx === 0
                                                  ? "emoji_events"
                                                  : idx === 1
                                                    ? "military_tech"
                                                    : "workspace_premium"}
                                              </span>
                                            ) : (
                                              <span className="text-sm font-bold text-slate-500">
                                                {idx + 1}
                                              </span>
                                            )}
                                          </div>
                                          {userMap[p.uid]?.icon_url ? (
                                            <img
                                              src={userMap[p.uid].icon_url}
                                              alt=""
                                              className="h-8 w-8 rounded-full object-cover sm:h-9 sm:w-9"
                                            />
                                          ) : (
                                            <div className="grid h-8 w-8 flex-shrink-0 place-items-center rounded-full bg-slate-700 text-sm font-bold text-white sm:h-9 sm:w-9">
                                              {userMap[
                                                p.uid
                                              ]?.display_name.charAt(0)}
                                            </div>
                                          )}
                                          <span className="truncate text-sm font-medium text-slate-200">
                                            {userMap[p.uid]?.display_name}
                                          </span>
                                        </div>
                                        <div
                                          className={`flex-shrink-0 rounded-md px-2 py-1 text-sm font-bold tabular-nums sm:px-3 ${
                                            p.value > 0
                                              ? "bg-emerald-500/10 text-emerald-400"
                                              : p.value < 0
                                                ? "bg-rose-500/10 text-rose-400"
                                                : "bg-slate-600/20 text-slate-400"
                                          }`}
                                        >
                                          {p.value > 0 ? "+" : ""}
                                          {p.value.toLocaleString()}
                                          <span className="ml-1 text-xs opacity-70">
                                            pt
                                          </span>
                                        </div>
                                      </div>
                                    ))}
                                </div>
                              </div>
                            </div>
                          );
                        })
                    )}
                  </div>
                </>
              )}
            </main>
          </div>
        </div>
      )}

      {/* 精算モーダル */}
      {showSettleModal && (
        <div className="fixed inset-0 bg-gradient-to-br from-black/60 via-black/50 to-purple-900/30 backdrop-blur-xl flex items-center justify-center z-50 animate-fade-in">
          <div className="w-full max-w-md bg-gradient-to-br from-gray-900/90 via-gray-800/80 to-gray-900/90 backdrop-blur-2xl rounded-3xl p-8 border border-gray-600/30 shadow-2xl transform animate-scale-up relative overflow-hidden">
            {/* 背景装飾 */}
            <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-bl from-purple-400/10 to-transparent rounded-full blur-2xl"></div>
            <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-blue-500/10 to-transparent rounded-full blur-xl"></div>

            <div className="relative z-10">
              <div className="flex justify-between items-center mb-6">
                {/* タイトル＋アイコン */}
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
                    <span className="material-symbols-outlined text-white text-xl">
                      payments
                    </span>
                  </div>
                  <h2 className="text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent tracking-wide">
                    SATO
                  </h2>
                </div>

                {/* 閉じるボタン */}
                <button
                  onClick={() => setShowSettleModal(false)}
                  className="w-10 h-10 flex items-center justify-center hover:bg-gray-700/60 rounded-xl transition-all duration-200 hover:scale-105 group"
                >
                  <span className="material-symbols-outlined text-gray-400 group-hover:text-white text-lg transition-colors">
                    close
                  </span>
                </button>
              </div>

              {/* 現在の残高表示 */}
              <div className="bg-gradient-to-r from-gray-800/60 to-gray-900/60 rounded-2xl p-4 mb-6 border border-gray-600/30">
                <div className="flex items-center justify-between">
                  <span className="text-gray-300 font-medium">
                    Your Balance
                  </span>
                  <span
                    className={`font-bold text-lg tabular-nums ${
                      myBalance >= 0 ? "text-green-400" : "text-red-400"
                    }`}
                  >
                    {myBalance >= 0 ? "+" : ""}
                    {myBalance.toLocaleString()}
                    <span className="text-sm opacity-80 ml-1">sato</span>
                  </span>
                </div>
              </div>

              {/* 送金可能な相手だけをリスト */}
              <div className="mb-6">
                <h3 className="text-white font-semibold mb-4 flex items-center gap-2">
                  <span className="material-symbols-outlined text-purple-400">
                    person_search
                  </span>
                  Who?
                </h3>

                {room.members.filter((m: any) => {
                  if (m.uid === me.uid) return false;
                  const theirBal = balances[m.uid] || 0;
                  return myBalance < 0 && theirBal > 0;
                }).length > 0 ? (
                  <div className="grid grid-cols-3 gap-3">
                    {room.members
                      .filter((m: any) => {
                        if (m.uid === me.uid) return false;
                        const theirBal = balances[m.uid] || 0;
                        return myBalance < 0 && theirBal > 0;
                      })
                      .map((m: any) => {
                        // userMap から情報を取得
                        const user = userMap[m.uid] ?? {
                          display_name: m.uid,
                          icon_url: "",
                        };
                        const maxPay = Math.min(
                          -myBalance,
                          balances[m.uid] || 0
                        );
                        const isSel = settleInput.to_uid === m.uid;

                        return (
                          <button
                            key={m.uid}
                            onClick={() =>
                              setSettleInput({ to_uid: m.uid, amount: 0 })
                            }
                            className={`relative flex flex-col items-center p-4 rounded-2xl border-2 transition-all duration-300 transform hover:scale-105 group ${
                              isSel
                                ? "border-purple-400/60 bg-gradient-to-br from-purple-600/20 to-indigo-600/20 shadow-lg shadow-purple-500/20"
                                : "border-gray-600/40 bg-gradient-to-br from-gray-700/40 to-gray-800/40 hover:border-purple-400/40"
                            }`}
                          >
                            {isSel && (
                              <div className="absolute inset-0 bg-gradient-to-br from-purple-500/10 to-indigo-500/10 rounded-2xl animate-pulse" />
                            )}

                            {/* アイコン or イニシャル */}
                            <div className="w-12 h-12 rounded-full overflow-hidden mb-2">
                              {user.icon_url ? (
                                <img
                                  src={user.icon_url}
                                  alt={user.display_name}
                                  className="w-full h-full object-cover"
                                />
                              ) : (
                                <div className="w-full h-full flex items-center justify-center bg-gray-600 text-white font-bold text-lg">
                                  {user.display_name.charAt(0).toUpperCase()}
                                </div>
                              )}
                            </div>

                            {/* 表示名 */}
                            <span
                              className={`text-sm font-medium truncate w-full text-center ${
                                isSel ? "text-purple-300" : "text-gray-300"
                              }`}
                            >
                              {user.display_name}
                            </span>

                            {/* Max */}
                            <div
                              className={`text-xs mt-1 px-2 py-0.5 rounded-full ${
                                isSel
                                  ? "bg-purple-500/20 text-purple-300"
                                  : "bg-gray-600/40 text-gray-400"
                              }`}
                            >
                              Max: {maxPay.toLocaleString()}
                            </div>
                          </button>
                        );
                      })}
                  </div>
                ) : (
                  <div className="bg-gradient-to-r from-orange-500/10 to-red-500/10 border border-orange-500/30 rounded-2xl p-4 flex items-center gap-3">
                    <div className="w-8 h-8 bg-orange-500/20 rounded-full flex items-center justify-center">
                      <span className="material-symbols-outlined text-orange-400 text-sm">
                        info
                      </span>
                    </div>
                    <p className="text-orange-300 font-medium">
                      No recipients available for Sato
                    </p>
                  </div>
                )}
              </div>

              {/* 金額入力＆送信 */}
              {settleInput.to_uid && (
                <div className="bg-gradient-to-br from-gray-800/60 to-gray-900/60 rounded-2xl p-5 border border-gray-600/30">
                  {(() => {
                    const maxPay = Math.min(
                      -myBalance,
                      balances[settleInput.to_uid] || 0
                    );
                    const isValid =
                      settleInput.amount >= 1 && settleInput.amount <= maxPay;

                    return (
                      <div className="space-y-4">
                        <div className="relative">
                          <input
                            type="text"
                            inputMode="numeric"
                            pattern="[0-9]*"
                            value={amountInput}
                            onChange={(e) => {
                              let raw = e.target.value;
                              raw = raw.replace(/[０-９]/g, (s) =>
                                String.fromCharCode(s.charCodeAt(0) - 65248)
                              );
                              if (!/^\d*$/.test(raw)) return;

                              const cleaned = raw.replace(/^0+(?=\d)/, "");

                              setAmountInput(cleaned);
                              setSettleInput((s) => ({
                                ...s,
                                amount: Number(cleaned || "0"),
                              }));
                            }}
                            placeholder="Enter amount..."
                            className="w-full px-4 py-4 bg-gray-900/60 border border-gray-600/50 text-white rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 transition-all duration-200 placeholder-gray-400 text-center text-xl font-semibold"
                          />
                          <div className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm">
                            sato
                          </div>
                        </div>

                        {!isValid && settleInput.amount > 0 && (
                          <div className="bg-red-500/10 border border-red-500/30 rounded-xl p-3 flex items-center gap-2">
                            <span className="material-symbols-outlined text-red-400 text-sm">
                              error
                            </span>
                            <p className="text-red-300 text-sm">
                              Amount must be between 1 -{" "}
                              {maxPay.toLocaleString()} sato
                            </p>
                          </div>
                        )}

                        <button
                          onClick={async () => {
                            if (!isValid) return;
                            await api.requestSettlement(
                              token!,
                              roomId!,
                              settleInput.to_uid,
                              settleInput.amount
                            );
                            setSettleInput({ to_uid: "", amount: 0 });
                            setAmountInput("");
                            setShowSettleModal(false);
                          }}
                          disabled={!isValid}
                          className={`w-full py-4 rounded-2xl font-semibold transition-all duration-300 transform relative overflow-hidden group ${
                            isValid
                              ? "bg-gradient-to-r from-purple-600 via-indigo-600 to-purple-700 hover:from-purple-500 hover:via-indigo-500 hover:to-purple-600 text-white shadow-xl hover:shadow-2xl hover:scale-[1.02] active:scale-[0.98]"
                              : "bg-gradient-to-r from-gray-700/50 to-gray-600/50 text-gray-400 cursor-not-allowed"
                          }`}
                        >
                          {isValid && (
                            <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                          )}
                          <span className="relative flex items-center justify-center gap-2">
                            <span className="material-symbols-outlined">
                              send_money
                            </span>
                            Sato Request
                          </span>
                        </button>
                      </div>
                    );
                  })()}
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {showSettingsModal && (
        <div className="fixed inset-0 flex items-center justify-center bg-black/60 backdrop-blur-sm z-50 animate-fade-in p-0 sm:p-4">
          <div className="w-full h-full sm:w-full sm:max-w-lg sm:h-auto bg-gray-800/95 rounded-none sm:rounded-2xl shadow-2xl animate-scale-up flex flex-col border border-gray-700/50">
            {/* Header */}
            <div className="flex justify-between items-center bg-gray-900/80 px-4 sm:px-6 py-3 sm:py-4 border-b border-gray-700 flex-shrink-0">
              <h2 className="text-base sm:text-lg font-semibold text-white flex items-center gap-2">
                <span className="material-symbols-outlined text-blue-400 text-xl">
                  settings
                </span>
                Room Settings
              </h2>
              <button
                onClick={() => setShowSettingsModal(false)}
                className="p-2 rounded-full hover:bg-gray-700/40 transition-colors"
              >
                <span className="material-symbols-outlined text-gray-300">
                  close
                </span>
              </button>
            </div>

            {/* Body: overflow-y-autoでコンテンツが溢れた場合のみスクロール */}
            <div className="flex-1 overflow-y-auto p-4 sm:p-6 space-y-5 sm:space-y-6 scrollbar-hide">
              {/* Room Information Section */}
              <div>
                <h3 className="text-xs sm:text-sm font-semibold text-gray-400 mb-2 sm:mb-3 border-b border-gray-700 pb-2">
                  Information
                </h3>
                <div className="grid grid-cols-2 gap-3 sm:gap-4 text-sm">
                  <div className="flex items-start gap-3">
                    <span className="material-symbols-outlined text-gray-500 text-lg sm:text-xl mt-0.5">
                      tag
                    </span>
                    <div>
                      <p className="font-semibold text-white leading-tight">
                        {room.room_id}
                      </p>
                      <p className="text-xs sm:text-sm text-gray-400">
                        Room ID
                      </p>
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <span className="material-symbols-outlined text-gray-500 text-lg sm:text-xl mt-0.5">
                      shield_person
                    </span>
                    <div>
                      <p className="font-semibold text-white leading-tight">
                        {userMap[room.created_by]?.display_name || "Unknown"}
                      </p>
                      <p className="text-xs sm:text-sm text-gray-400">Owner</p>
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <span className="material-symbols-outlined text-gray-500 text-lg sm:text-xl mt-0.5">
                      calendar_month
                    </span>
                    <div>
                      <p className="font-semibold text-white leading-tight">
                        {new Date(room.created_at).toLocaleDateString()}
                      </p>
                      <p className="text-xs sm:text-sm text-gray-400">
                        Created On
                      </p>
                    </div>
                  </div>
                  <div className="flex items-start gap-3">
                    <span className="material-symbols-outlined text-gray-500 text-lg sm:text-xl mt-0.5">
                      group
                    </span>
                    <div>
                      <p className="font-semibold text-white leading-tight">
                        {room.members.length} Members
                      </p>
                      <p className="text-xs sm:text-sm text-gray-400">
                        Participants
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Edit Section (Owner only) */}
              {room.created_by === me.uid && (
                <div>
                  <h3 className="text-xs sm:text-sm font-semibold text-gray-400 mb-2 sm:mb-3 border-b border-gray-700 pb-2">
                    Edit Details
                  </h3>
                  <div className="space-y-3 sm:space-y-4">
                    <div>
                      <label className="block text-xs sm:text-sm text-gray-400 mb-1">
                        Name
                      </label>
                      <input
                        value={editName}
                        onChange={(e) => setEditName(e.target.value)}
                        maxLength={20}
                        className="w-full bg-gray-900/60 border border-gray-700 text-white rounded-lg px-3 py-2 sm:px-4 sm:py-2 text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-indigo-500 transition"
                      />
                    </div>
                    <div>
                      <label className="block text-xs sm:text-sm text-gray-400 mb-1">
                        Description
                      </label>
                      <textarea
                        value={editDesc}
                        onChange={(e) => setEditDesc(e.target.value)}
                        maxLength={100}
                        rows={3}
                        className="w-full bg-gray-900/60 border border-gray-700 text-white rounded-lg px-3 py-2 sm:px-4 sm:py-2 text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-indigo-500 transition resize-none"
                      />
                    </div>
                    <button
                      onClick={handleUpdateRoom}
                      disabled={updating}
                      className={`w-full py-2.5 rounded-lg text-white font-semibold transition-colors text-sm sm:text-base ${
                        updating
                          ? "bg-indigo-600/50 cursor-not-allowed"
                          : "bg-indigo-600 hover:bg-indigo-500"
                      }`}
                    >
                      {updating ? "Updating..." : "Save Changes"}
                    </button>
                  </div>
                </div>
              )}

              {/* Danger Zone */}
              <div>
                <h3 className="text-xs sm:text-sm font-semibold text-red-400 mb-2 sm:mb-3 border-b border-red-500/30 pb-2">
                  Danger Zone
                </h3>
                <button
                  onClick={
                    room.created_by === me.uid
                      ? handleDeleteRoom
                      : handleLeaveRoom
                  }
                  className="w-full py-2.5 rounded-lg bg-red-600/20 hover:bg-red-600/40 text-red-300 font-medium transition-colors border border-red-500/30 text-sm sm:text-base"
                >
                  {room.created_by === me.uid
                    ? "Delete This Room"
                    : "Leave Room"}
                </button>
                {errorMessage && (
                  <p className="text-red-400 text-xs sm:text-sm text-center mt-2">
                    {errorMessage}
                  </p>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* 精算リクエスト承認モーダル */}
      {pendingReq && (
        <div className="fixed inset-0 bg-gradient-to-br from-black/70 via-black/60 to-blue-900/30 backdrop-blur-xl flex items-center justify-center z-50 animate-fade-in">
          <div className="w-full max-w-md bg-gradient-to-br from-gray-900/95 via-gray-800/85 to-gray-900/95 backdrop-blur-2xl rounded-3xl p-8 border border-gray-600/30 shadow-2xl transform animate-scale-up relative overflow-hidden">
            {/* 背景装飾 */}
            <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-bl from-blue-400/10 to-transparent rounded-full blur-2xl"></div>
            <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-green-500/10 to-transparent rounded-full blur-xl"></div>

            <div className="relative z-10">
              {/* ヘッダー */}
              <div className="text-center mb-6">
                <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg">
                  <span className="material-symbols-outlined text-white text-2xl">
                    request_quote
                  </span>
                </div>
                <h2 className="text-xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                  Sato Request
                </h2>
              </div>

              {/* リクエスト詳細 */}
              <div className="bg-gradient-to-br from-gray-800/60 to-gray-900/60 rounded-2xl p-6 mb-6 border border-gray-600/30">
                {(() => {
                  // ユーザー情報を取得
                  const user = userMap[pendingReq.from_uid] ?? {
                    display_name: pendingReq.from_uid,
                    icon_url: "",
                  };
                  return (
                    <div className="flex items-center gap-4 mb-4">
                      {/* アバター */}
                      <div className="w-12 h-12 rounded-full overflow-hidden bg-gray-700 flex-shrink-0">
                        {user.icon_url ? (
                          <img
                            src={user.icon_url}
                            alt={user.display_name}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center text-white font-bold text-lg">
                            {user.display_name.charAt(0).toUpperCase()}
                          </div>
                        )}
                      </div>
                      {/* 表示名 */}
                      <div>
                        <p className="text-white font-semibold">
                          {user.display_name}
                        </p>
                      </div>
                    </div>
                  );
                })()}

                <div className="bg-gradient-to-r from-yellow-500/20 to-amber-500/20 border border-yellow-400/30 rounded-xl p-4 text-center">
                  <p className="text-yellow-300 font-bold text-2xl">
                    {pendingReq.amount.toLocaleString()}
                    <span className="text-base opacity-80 ml-1">sato</span>
                  </p>
                </div>
              </div>
              {/* アクションボタン */}
              <div className="flex gap-3">
                <button
                  onClick={async () => {
                    await api.rejectSettlementRequest(
                      token!,
                      roomId!,
                      pendingReq.from_uid
                    );
                    setPendingReq(null);
                  }}
                  className="flex-1 py-4 bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-500 hover:to-pink-500 text-white rounded-2xl font-semibold transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98] shadow-lg hover:shadow-xl relative overflow-hidden group"
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <span className="relative flex items-center justify-center gap-2">
                    <span className="material-symbols-outlined">block</span>
                    Reject
                  </span>
                </button>

                <button
                  onClick={async () => {
                    await api.approveSettlementRequest(
                      token!,
                      roomId!,
                      pendingReq.from_uid
                    );
                    setPendingReq(null);
                  }}
                  className="flex-1 py-4 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-500 hover:to-emerald-500 text-white rounded-2xl font-semibold transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98] shadow-lg hover:shadow-xl relative overflow-hidden group"
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <span className="relative flex items-center justify-center gap-2">
                    <span className="material-symbols-outlined">
                      check_circle
                    </span>
                    Approve
                  </span>
                </button>
              </div>

              {/* 注意事項 */}
              <div className="mt-4 bg-blue-500/10 border border-blue-500/30 rounded-xl p-3 flex items-start gap-2">
                <span className="material-symbols-outlined text-blue-400 text-sm mt-0.5">
                  info
                </span>
                <p className="text-blue-300 text-xs">
                  Approving will transfer {pendingReq.amount.toLocaleString()}{" "}
                  sato from your balance to {pendingReq.from_uid}
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      {joinQueue.length > 0 && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-md flex items-center justify-center z-50 animate-fade-in p-4">
          <div className="w-full max-w-lg bg-gradient-to-br from-gray-900 via-gray-800 to-gray-700 rounded-3xl p-6 border border-gray-700/50 shadow-2xl transform animate-scale-up">
            {/* Header */}
            <div className="flex justify-between items-center mb-6">
              <h3 className="flex items-center gap-3 text-2xl font-bold text-amber-400">
                <span className="material-symbols-outlined text-3xl">
                  notification_important
                </span>
                Join Requests
              </h3>
            </div>

            {/* List */}
            <div className="space-y-4 max-h-[60vh] overflow-y-auto custom-scrollbar pr-2">
              {" "}
              {/* pr-2でスクロールバーのスペースを確保 */}
              {joinQueue.map((uid) => {
                const user = userMap[uid] || {
                  display_name: uid,
                  icon_url: "",
                };
                const online = ctxOnlineUsers[roomId]?.has(uid);
                return (
                  <div
                    key={uid}
                    className="flex items-center justify-between bg-gray-800/60 border border-gray-700/50 rounded-xl p-4 transition-all duration-200 hover:bg-gray-700/70 shadow-md"
                  >
                    {/* User Info */}
                    <div className="flex items-center gap-4 min-w-0 flex-grow">
                      {" "}
                      {/* flex-growを追加してテキストがスペースを埋めるように */}
                      <div className="relative flex-shrink-0">
                        {user.icon_url ? (
                          <img
                            src={user.icon_url}
                            alt={user.display_name}
                            className="w-12 h-12 rounded-full object-cover shadow-lg border border-gray-600"
                          />
                        ) : (
                          <div className="w-12 h-12 rounded-full bg-gradient-to-br from-gray-600 to-gray-700 flex items-center justify-center text-lg font-bold text-white shadow-lg border border-gray-600">
                            {user.display_name.charAt(0).toUpperCase()}
                          </div>
                        )}
                        <span
                          className={`absolute bottom-0 right-0 w-3.5 h-3.5 rounded-full border-2 border-gray-900 ${
                            // border-gray-900に調整
                            online ? "bg-green-400" : "bg-gray-500"
                          }`}
                          title={online ? "Online" : "Offline"}
                        />
                      </div>
                      <span className="font-semibold text-xl text-white truncate leading-tight">
                        {" "}
                        {/* text-xlに上げて、truncateを確保 */}
                        {user.display_name}
                      </span>
                    </div>

                    {/* Actions */}
                    <div className="flex gap-3 flex-shrink-0 ml-4">
                      {" "}
                      {/* ml-4で少しマージンを追加 */}
                      <button
                        onClick={() => handleDecision("reject", uid)}
                        className="flex items-center justify-center px-4 py-2 bg-rose-700/40 hover:bg-rose-700/60 text-rose-300 rounded-lg text-sm font-medium transition-colors duration-200 border border-rose-600/50 shadow-sm hover:shadow-md"
                        title="Reject Request"
                      >
                        <span className="material-symbols-outlined text-base mr-1">
                          cancel
                        </span>
                        Reject
                      </button>
                      <button
                        onClick={() => handleDecision("approve", uid)}
                        className="flex items-center justify-center px-4 py-2 bg-teal-700/40 hover:bg-teal-700/60 text-teal-300 rounded-lg text-sm font-medium transition-colors duration-200 border border-teal-600/50 shadow-sm hover:shadow-md"
                        title="Accept Request"
                      >
                        <span className="material-symbols-outlined text-base mr-1">
                          check_circle
                        </span>
                        Accept
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


--- FILE: ./components/auth/AnimationSplash.tsx ---

import React, { useEffect, useState } from "react";
import styles from "./AnimationSplash.module.css"; // Import CSS module

const LETTERS = ["S", "A", "T", "O"]; // Characters to animate

export default function AnimationSplash({ show = true }: { show?: boolean }) {
  const [shouldFadeOut, setShouldFadeOut] = useState(false);
  const [isAnimationComplete, setIsAnimationComplete] = useState(false);

  // Animation parameters
  const CHAR_ANIMATION_DURATION_S = 0.7; // Duration of individual character animation in seconds
  const CHAR_DELAY_INCREMENT_S = 0.25; // Delay between each character's animation start in seconds
  const FADE_OUT_START_DELAY_S = 1.0; // Delay before the whole splash fades out after all characters appear
  const FADE_OUT_DURATION_S = 1.2; // Duration of the fade-out animation in seconds

  useEffect(() => {
    if (!show) {
      setShouldFadeOut(false);
      setIsAnimationComplete(false);
      return;
    }

    const totalCharAppearTime = (LETTERS.length - 1) * CHAR_DELAY_INCREMENT_S + CHAR_ANIMATION_DURATION_S;
    const fadeOutTriggerTime = totalCharAppearTime + FADE_OUT_START_DELAY_S;
    const totalAnimationTime = fadeOutTriggerTime + FADE_OUT_DURATION_S;

    const fadeOutTimer = setTimeout(() => {
      setShouldFadeOut(true);
    }, fadeOutTriggerTime * 1000);

    const completeTimer = setTimeout(() => {
      setIsAnimationComplete(true);
    }, totalAnimationTime * 1000);

    return () => {
      clearTimeout(fadeOutTimer);
      clearTimeout(completeTimer);
    };
  }, [show]);

  if (!show || isAnimationComplete) return null;

  return (
    <div
      className={`
        fixed inset-0
        w-screen h-screen
        flex items-center justify-center
        bg-gradient-to-br from-gray-950 via-gray-900 to-gray-950
        z-[9999]
      `}
    >
      <div
        className={`
          flex
          font-extrabold text-8xl md:text-7xl sm:text-5xl
          text-white
          drop-shadow-[0_0_10px_rgba(255,255,255,0.5)]
          perspective-[1000px]
          space-x-2
          ${shouldFadeOut ? styles.fadeOutShrink : ""}
        `}
      >
        {LETTERS.map((ch, i) => (
          <span
            key={i}
            className={`${styles.satoChar} ${styles.charAppear}`}
            style={{
              animationDelay: `${i * CHAR_DELAY_INCREMENT_S}s`,
            }}
          >
            {ch}
          </span>
        ))}
      </div>
    </div>
  );
}


--- FILE: ./context/PresenceContext.tsx ---

"use client";

import React, {
  createContext,
  useContext,
  useEffect,
  useRef,
  useState,
  useCallback,
  PropsWithChildren,
} from "react";
import * as api from "@/lib/api";
import { auth } from "@/lib/firebaseClient";
import { onAuthStateChanged } from "firebase/auth";

type Event =
  | { type: "user_entered"; room_id: string; uid: string }
  | { type: "user_left"; room_id: string; uid: string }
  | { type: string; [key: string]: any };

interface PresenceContextValue {
  wsReady: boolean;
  onlineUsers: Record<string, Set<string>>;
  subscribePresence: (room_id: string) => void;
  unsubscribePresence: (room_id: string) => void;
  enterRoom: (room_id: string) => void;
  leaveRoom: (room_id: string) => void;
  sendEvent: (ev: object) => void;
  onEvent: (listener: (ev: Event) => void) => () => void;
}

const PresenceContext = createContext<PresenceContextValue | null>(null);

export const PresenceProvider = ({ children }: PropsWithChildren) => {
  const wsRef = useRef<WebSocket | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [wsReady, setWsReady] = useState(false);
  const [onlineUsers, setOnlineUsers] = useState<Record<string, Set<string>>>(
    {}
  );
  const subscribedRooms = useRef<Set<string>>(new Set());
  const enteredRooms = useRef<Set<string>>(new Set());
  const listeners = useRef<Set<(ev: Event) => void>>(new Set());

  /* ----------------------------- auth token ----------------------------- */
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        const idToken = await user.getIdToken(true);
        setToken(idToken);
      } else {
        setToken(null);
      }
    });

    return () => unsubscribe();
  }, []);

  /* ----------------------------- WebSocket ------------------------------ */
  useEffect(() => {
    if (!token) {
      wsRef.current?.close();
      setWsReady(false);
      return;
    }

    const ws = new WebSocket(
      `${process.env.NEXT_PUBLIC_WS_URL || ""}?token=${token}`
    );
    wsRef.current = ws;

    ws.onopen = () => {
      setWsReady(true);
      enteredRooms.current.forEach((room_id) =>
        ws.send(JSON.stringify({ type: "enter_room", room_id }))
      );
    };

    ws.onmessage = (e) => {
      let ev: Event;
      try {
        ev = JSON.parse(e.data);
      } catch {
        return;
      }

      if (ev.type === "user_entered") {
        setOnlineUsers((prev) => {
          const next = { ...prev };
          (next[ev.room_id] ??= new Set()).add(ev.uid);
          return next;
        });
      } else if (ev.type === "user_left") {
        setOnlineUsers((prev) => {
          const next = { ...prev };
          next[ev.room_id]?.delete(ev.uid);
          return next;
        });
      }

      listeners.current.forEach((fn) => fn(ev));
    };

    ws.onclose = () => {
      setWsReady(false);
    };

    return () => {
      ws.onclose = null;
      ws.close();
    };
  }, [token]);

  const sendEvent = useCallback((ev: object) => {
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify(ev));
    }
  }, []);

  /* --------------------------- dashboard --------------------------- */
  const subscribePresence = useCallback(
    (room_id: string) => {
      if (!token || subscribedRooms.current.has(room_id)) return;
      subscribedRooms.current.add(room_id);
      api.getPresence(token, room_id).then((list) => {
        setOnlineUsers((prev) => ({ ...prev, [room_id]: new Set(list) }));
      });
    },
    [token]
  );

  const unsubscribePresence = useCallback((room_id: string) => {
    subscribedRooms.current.delete(room_id);
    setOnlineUsers((prev) => {
      const next = { ...prev };
      delete next[room_id];
      return next;
    });
  }, []);

  /* ---------------------------- room screen ----------------------------- */
  const enterRoom = useCallback(
    (room_id: string) => {
      if (!token || enteredRooms.current.has(room_id)) return;
      if (wsRef.current?.readyState === WebSocket.OPEN) {
        wsRef.current.send(JSON.stringify({ type: "enter_room", room_id }));
      }
      enteredRooms.current.add(room_id);
      api.getPresence(token, room_id).then((list) => {
        setOnlineUsers((prev) => ({ ...prev, [room_id]: new Set(list) }));
      });
    },
    [token]
  );

  const leaveRoom = useCallback((room_id: string) => {
    if (enteredRooms.current.has(room_id)) {
      if (wsRef.current?.readyState === WebSocket.OPEN) {
        wsRef.current.send(JSON.stringify({ type: "leave_room", room_id }));
      }
      enteredRooms.current.delete(room_id);
    }
  }, []);

  /* ------------------------------ API ------------------------------- */
  const onEvent = useCallback((listener: (ev: Event) => void) => {
    listeners.current.add(listener);
    return () => listeners.current.delete(listener);
  }, []);

  return (
    <PresenceContext.Provider
      value={{
        wsReady,
        onlineUsers,
        subscribePresence,
        unsubscribePresence,
        enterRoom,
        leaveRoom,
        sendEvent,
        onEvent,
      }}
    >
      {children}
    </PresenceContext.Provider>
  );
};

export const usePresence = (): PresenceContextValue => {
  const ctx = useContext(PresenceContext);
  if (!ctx) throw new Error("usePresence must be used within PresenceProvider");
  return ctx;
};


--- FILE: ./lib/api.ts ---

// src/lib/api.ts
const API_BASE = process.env.NEXT_PUBLIC_API_BASE || "";

type ApiOptions = {
  method?: string;
  body?: any;
  token?: string;
  headers?: Record<string, string>;
};

async function api<T>(path: string, options: ApiOptions = {}): Promise<T> {
  const token = options.token;
  if (!token) throw new Error("JWT token required");
  const res = await fetch(`${API_BASE}${path}`, {
    method: options.method || "GET",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`,
      ...(options.headers || {}),
    },
    body: options.body ? JSON.stringify(options.body) : undefined,
  });
  if (!res.ok) {
    const err = await res.json().catch(() => ({}));
    throw new Error(err.detail || res.statusText);
  }
  return await res.json();
}

// --- ユーザー ---
export const getMe = (token: string) => api("/users/me", { token });
export const updateMe = (token: string, data: { display_name: string }) =>
  api("/users/me", { method: "PUT", token, body: data });
export const getUserPointHistory = (token: string) =>
  api("/users/me/points/history", { token });
export const getUserSettleHistory = (token: string) =>
  api("/users/me/settle/history", { token });
export const getListUsers = (token: string) => api("/users", { token });

export async function createUser(
  token: string,
  { display_name, email, icon_url }
) {
  return api("/users", {
    method: "POST",
    token,
    body: { display_name, email, icon_url },
  });
}
// --- ルーム ---
export const createRoom = (
  token: string,
  room: { name: string; description?: string; color_id: number }
) => api("/rooms", { method: "POST", token, body: room });
export const listRooms = (token: string) => api("/rooms", { token });

// --- Presence ---
export const getPresence = (token: string, room_id: string) =>
  api<string[]>(`/rooms/${room_id}/presence`, { token });
export const getAllRooms = (token: string) => api("/rooms/all", { token });
export const getRoom = (token: string, room_id: string) =>
  api(`/rooms/${room_id}`, { token });
export const updateRoom = (
  token: string,
  room_id: string,
  updates: Partial<{ name: string; description: string; color_id: number }>
) => api(`/rooms/${room_id}`, { method: "PUT", token, body: updates });
export const deleteRoom = (token: string, room_id: string) =>
  api(`/rooms/${room_id}`, { method: "DELETE", token });
export const joinRoom = (token: string, room_id: string) =>
  api(`/rooms/${room_id}/join`, { method: "POST", token });
export const cancelJoinRequest = (token: string, room_id: string) =>
  api(`/rooms/${room_id}/cancel_join`, { method: "POST", token });
export const leaveRoom = (token: string, room_id: string) =>
  api(`/rooms/${room_id}/leave`, { method: "POST", token });
export const approveMember = (
  token: string,
  room_id: string,
  applicant_user_id: string
) =>
  api(`/rooms/${room_id}/approve`, {
    method: "POST",
    token,
    body: { applicant_user_id },
  });
export const rejectMember = (
  token: string,
  room_id: string,
  applicant_user_id: string
) =>
  api(`/rooms/${room_id}/reject`, {
    method: "POST",
    token,
    body: { applicant_user_id },
  });

// --- ポイント ---
export const addPoints = (
  token: string,
  room_id: string,
  points: Array<{ uid: string; value: number }>,
  approved_by: string[]
) =>
  api(`/rooms/${room_id}/points`, {
    method: "POST",
    token,
    body: { points, approved_by },
  });
export const getPointHistory = (token: string, room_id: string) =>
  api(`/rooms/${room_id}/points/history`, { token });
export const approvePoint = (
  token: string,
  room_id: string,
  round_id: string
) =>
  api(`/rooms/${room_id}/points/${round_id}/approve`, {
    method: "POST",
    token,
  });
export const getPointStatus = (
  token: string,
  room_id: string,
  round_id: string
) => api(`/rooms/${room_id}/points/${round_id}/status`, { token });
export const deletePointRecord = (
  token: string,
  room_id: string,
  round_id: string
) => api(`/rooms/${room_id}/points/${round_id}`, { method: "DELETE", token });

export const startPointRound = (token: string, room_id: string) =>
  api(`/rooms/${room_id}/points/start`, { method: "POST", token });

export const submitPoint = (
  token: string,
  room_id: string,
  uid: string,
  value: number
) =>
  api(`/rooms/${room_id}/points/submit`, {
    method: "POST",
    token,
    body: { uid, value },
  });

export const finalizePointRound = (token: string, room_id: string) =>
  api(`/rooms/${room_id}/points/finalize`, { method: "POST", token });
export const settle = (
  token: string,
  room_id: string,
  to_uid: string,
  amount: number
) =>
  api(`/rooms/${room_id}/settle`, {
    method: "POST",
    token,
    body: { to_uid, amount },
  });
export const approveSettlement = (
  token: string,
  room_id: string,
  settlement_id: string
) =>
  api(`/rooms/${room_id}/settle/${settlement_id}/approve`, {
    method: "POST",
    token,
  });
export const getSettlementHistory = (token: string, room_id: string) =>
  api(`/rooms/${room_id}/settle/history`, { token });

export const requestSettlement = (
  token: string,
  room_id: string,
  to_uid: string,
  amount: number
) =>
  api(`/rooms/${room_id}/settle/request`, {
    method: "POST",
    token,
    body: { to_uid, amount },
  });

export const approveSettlementRequest = (
  token: string,
  room_id: string,
  from_uid: string
) =>
  api(`/rooms/${room_id}/settle/request/${from_uid}/approve`, {
    method: "POST",
    token,
  });

export const rejectSettlementRequest = (
  token: string,
  room_id: string,
  from_uid: string
) =>
  api(`/rooms/${room_id}/settle/request/${from_uid}/reject`, {
    method: "POST",
    token,
  });


--- FILE: ./lib/firebaseClient.ts ---

import { initializeApp, getApps } from "firebase/app";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

const app = !getApps().length ? initializeApp(firebaseConfig) : getApps()[0];

export const auth = getAuth(app);


