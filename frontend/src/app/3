// app/c420/page.tsx
"use client";

import Link from "next/link";
import { useRouter } from "next/navigation";
import { useEffect, useState, useMemo } from "react";
import { auth } from "@/lib/firebaseClient";
import { signOut } from "firebase/auth";
import { onAuthStateChanged } from "firebase/auth";
import * as api from "@/lib/api";
import { usePresence } from "@/context/PresenceContext";
import styles from "./Header.module.css";
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell
} from "recharts";


export default function DashboardPage() {
  const router = useRouter();
  const [token, setToken] = useState<string | null>(null);
  const [me, setMe] = useState<any>(null);
  const [rooms, setRooms] = useState<any[]>([]);
  const [allRooms, setAllRooms] = useState<any[]>([]);
  const [msg, setMsg] = useState("");
  const [newRoom, setNewRoom] = useState({
    name: "",
    color_id: 1,
    description: "",
  });
  const [isEditingName, setIsEditingName] = useState(false);
  const [editedName, setEditedName] = useState("");
  // タブ切り替え用のステートを定義
const [activeTab, setActiveTab] = useState<
  "overview" | "recent_battles" | "sato_transactions"
>("overview");

  // Modal states
  const [showRoomModal, setShowRoomModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [formError, setFormError] = useState<string | null>(null);

const [userList, setUserList] = useState<any[]>([]);
  const [showProfileModal, setShowProfileModal] = useState(false);
  const [showPointHistoryModal, setShowPointHistoryModal] = useState(false);
  const [userPointHistory, setUserPointHistory] = useState<any[]>([]);
  const [roomModalTab, setRoomModalTab] = useState<
    "joined" | "created" | "all"
  >("joined");
  const [initializing, setInitializing] = useState(true);
  const {
    wsReady,
    subscribePresence,
    unsubscribePresence,
    onlineUsers,
    onEvent,
  } = usePresence();

// … 既存の import や state 定義のあと


// 1) Fetch the user's full point history from the backend
// This includes all recorded rounds (PON and SATO) where the user participated.
// Structure of the response (Array of round records):
//
// [
//   {
//     "round_id": "PON:abc123",         // Unique identifier for the round
//     "points": [
//       { "uid": "userA", "value": +10 },
//       { "uid": "userB", "value": -10 }
//     ]
//   },
//   {
//     "round_id": "SATO:def456",
//     "points": [
//       { "uid": "userA", "value": +3 },
//       { "uid": "userA", "value": -2 }
//     ]
//   },
//   ...
// ]
//
// Each round contains a list of point assignments for each user.
// - `PON` rounds represent competitive game results.
// - `SATO` rounds represent value transfers (positive or negative).
//
useEffect(() => {
  if (!token) return;
  api.getUserPointHistory(token)
    .then((history) => {
      setUserPointHistory(history);
    })
    .catch((error) => {
      console.error("Failed to fetch user point history:", error);
    });
}, [token]);


// 2) Fetch the list of all registered users (with optional online status).
// Used for displaying user avatars, names, or matching by UID.
// Structure of the response:
//
// [
//   {
//     "uid": "3Ysk8ZdC",                            // Unique user ID
//     "display_name": "らいむ",                     // Display name
//     "icon_url": "https://example.com/avatar.png", // Avatar URL
//     "registered_at": "2025-07-06T01:38:36.953Z",  // ISO timestamp of registration
//     "is_online": true                             // Whether user is currently online
//   },
//   ...
// ]
//
// This list can be used to:
// - Match UIDs from point history to display user info
// - Show online/offline status
// - Build recent opponent lists
//
useEffect(() => {
  if (!token) return;

  api.getListUsers(token)
    .then((users) => {
      setUserList(users);
    })
    .catch((err) => {
      console.error("Failed to fetch user list:", err);
    });
}, [token]);


// Compute all derived profile statistics from the raw point-history JSON.
// We memoize so it only recalculates when the history or current user changes.
//
//

const stats = useMemo(() => {
  // ログインユーザー情報または履歴データがなければ、すべて0を返す
  if (!me || userPointHistory.length === 0) {
    return {
      // PONゲームのカウント
      ponRounds: 0,
      wins: 0,
      totalPonPts: 0,
      winRate: 0,
      avgPonPts: 0,

      // 最大・最小・連勝記録
      maxPon: 0,
      minPon: 0,
      bestStreak: 0,

      // SATO取引の合計
      satoIn: 0,
      satoOut: 0,
      satoNet: 0,
      avgSato: 0,
      maxSato: 0,

      // 新規：対戦相手をグループ化したデータ
      groupedOpponents: [],
    };
  }

  // ヘルパー関数: このユーザーのポイント値を取得 (見つからなければ0)
  const myValue = (rec: any) => {
    const p = rec.points.find((p: any) => p.uid === me.uid);
    return p ? p.value : 0;
  };

  // --- PONの統計情報 ---
  const pon = userPointHistory.filter(r => r.round_id.startsWith("PON"));
  const sato = userPointHistory.filter(r => r.round_id.startsWith("SATO"));

  const ponRounds = pon.length; // PONラウンド数
  const valuesPon = pon.map(myValue); // このユーザーのPONポイント値の配列
  const wins = valuesPon.filter(v => v > 0).length; // プラス得点のラウンド数
  const totalPonPts = valuesPon.reduce((sum, v) => sum + v, 0); // 純PONポイント
  const winRate = ponRounds
    ? Math.round((wins / ponRounds) * 100) // 勝率を整数パーセントで
    : 0;
  const avgPonPts = ponRounds
    ? Math.round(totalPonPts / ponRounds) // PONラウンドあたりの平均ポイント
    : 0;
  const maxPon = ponRounds
    ? Math.max(...valuesPon) // 最高の単一ラウンドPONポイント
    : 0;
  const minPon = ponRounds
    ? Math.min(...valuesPon) // 最悪の単一ラウンドPONポイント
    : 0;

  // 最長連勝記録の計算
  let bestStreak = 0;
  let cur = 0;
  valuesPon.forEach(v => {
    if (v > 0) {
      cur += 1;
      bestStreak = Math.max(bestStreak, cur);
    } else {
      cur = 0;
    }
  });

  // --- SATOの統計情報 ---
  const valuesSato = sato.map(myValue); // このユーザーのSATOポイント値の配列
  const satoIn = valuesSato
    .filter(v => v > 0) // 入金のみ
    .reduce((sum, v) => sum + v, 0); // 受取額の合計
  const satoOut = valuesSato
    .filter(v => v < 0) // 出金のみ
    .reduce((sum, v) => sum + Math.abs(v), 0); // 支払額の合計
  const satoNet = satoIn - satoOut; // 純残高
  const avgSato = sato.length
    ? Math.round(satoNet / sato.length) // SATOラウンドあたりの平均
    : 0;
  const maxSato = sato.length
    ? Math.max(...valuesSato) // 最大の単一ラウンドSATO変動
    : 0;

  // --- 新規: 対戦相手をグループ化したデータ ---
  const groupedOpponents: {
    roundId: string;
    date: string;
    participants: { uid: string; displayName: string; iconUrl: string | null; score: number }[];
  }[] = pon.map(round => {
    // `created_at` が存在すればそれを使用、なければ現在の時刻をフォールバックとして使用
    const date = round.created_at ? new Date(round.created_at).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) : 'Unknown Date';
    const participants = round.points.map((point: any) => {
      const user = userList.find(u => u.uid === point.uid);
      return {
        uid: point.uid,
        displayName: user?.display_name || "Unknown User",
        iconUrl: user?.icon_url || null,
        score: point.value,
      };
    });
    return {
      roundId: round.round_id,
      date: date,
      participants: participants,
    };
  }).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()); // 最新のものを上位にソート

  // 計算されたすべてのメトリクスを一つのオブジェクトとして返す
  return {
    ponRounds,
    wins,
    totalPonPts,
    winRate,
    avgPonPts,
    maxPon,
    minPon,
    bestStreak,
    satoIn,
    satoOut,
    satoNet,
    avgSato,
    maxSato,
    groupedOpponents, // 新しく追加した対戦相手データ
  };
}, [userPointHistory, me, userList]); // userListも依存配列に含める
  useEffect(() => {
    if (token) {
      api
        .getUserPointHistory(token)
        .then((history) => {
          console.log("User Point History:", history);
        })
        .catch((error) => {
          console.error("Failed to fetch user point history:", error);
        });
    }
  }, [token]); // token が変更された時にこの処理が実行されます
  // New logic to handle Firebase auth state and user setup
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (!user) {
        router.replace("/");
        return;
      }
      try {
        const idToken = await user.getIdToken();
        setToken(idToken);

        // 既存ユーザー API 取得
        try {
          const appUser = await api.getMe(idToken);
          setMe(appUser);
        } catch {
          // ユーザーが存在しなければ作成
          const newUser = await api.createUser(idToken, {
            display_name: user.displayName || user.email!.split("@")[0],
            email: user.email!,
            icon_url: user.photoURL ?? "",
          });
          setMe(newUser);
        }
      } catch (err) {
        console.error("ユーザー情報の取得・作成に失敗", err);
      } finally {
        // 認証まわりの初期化は一度だけ
        setInitializing(false);
      }
    });

    return () => unsubscribe();
  }, [router]);
  useEffect(() => {
    if (showProfileModal) {
      setEditedName(me?.display_name || "");
      setIsEditingName(false);
    }
  }, [showProfileModal, me?.display_name]);
  useEffect(() => {
    const off = onEvent((ev) => {
      switch (ev.type) {
        case "user_entered":
        case "user_left":
        case "join_request":
        case "join_request_cancelled":
        case "join_rejected":
        case "join_approved":
          setMsg((m) => m + "x");
          break;
        default:
          break;
      }
    });
    return off;
  }, [onEvent]);

  useEffect(() => {
    if (!token) return;
    api.listRooms(token).then(setRooms);
  }, [token, msg]);

  useEffect(() => {
    if (!token) return;
    api.getAllRooms(token).then(setAllRooms);
  }, [token, msg]);

  useEffect(() => {
    rooms.forEach((r) => subscribePresence(r.room_id));
    return () => {
      rooms.forEach((r) => unsubscribePresence(r.room_id));
    };
  }, [rooms, subscribePresence, unsubscribePresence]);

  const handleCreateRoom = async () => {
    if (!newRoom.name) {
      setFormError("ルーム名を入力してください");
      return;
    }
    if (newRoom.name.length > 20) {
      setFormError("ルーム名は20文字以内で入力してください");
      return;
    }
    if (newRoom.description.length > 100) {
      setFormError("説明は100文字以内で入力してください");
      return;
    }
    setFormError(null);
    await api.createRoom(token, newRoom);
    setNewRoom({ name: "", description: "" });
    setShowCreateModal(false);
    setMsg("new-room");
  };

  const myRooms = rooms.filter((r) => r.created_by === me?.uid);
  const joinedRooms = rooms;
  const availableRooms = allRooms.filter(
    (r) => !rooms.some((x) => x.room_id === r.room_id)
  );
  const StatItem = ({ icon, label, value, color }: { icon: string, label: string, value: string | number, color: string }) => (
  <div className="flex flex-col items-center bg-gray-900/60 rounded-lg p-3 border border-gray-700/50 shadow-inner">
    <span className={`material-symbols-outlined text-2xl ${color}`}>{icon}</span>
    <span className="mt-1 text-lg font-semibold text-white">{value}</span>
    <span className="text-xs text-gray-400">{label}</span>
  </div>
);

  if (initializing) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mx-auto mb-4"></div>
          <p className="text-gray-400">Loading…</p>
        </div>
      </div>
    );
  }
  if (!token || !me)
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mx-auto mb-4"></div>
          <p className="text-gray-400">Loading…</p>
        </div>
      </div>
    );

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-gray-950 text-gray-100">
      {/* Header */}
      <header
        className={`relative backdrop-blur-lg bg-gray-900/60 border-b border-gray-700/40 ${styles.headerBackground}`}
      >
        <div className="max-w-7xl  mx-auto px-6 py-4">
          <div className="flex justify-between items-center">
            {/* 左側: SATOPON ロゴと status */}
            <div className="flex items-center space-x-4">
              <Link
                href="https://sites.google.com/view/jsato/"
                target="_blank"
                rel="noopener noreferrer"
              >
                <h1 className="text-xl font-bold text-white bg-clip-text text-transparent cursor-pointer hover:underline">
                  SATOPON
                </h1>
              </Link>
              {!wsReady && (
                <p className="text-xs text-yellow-400 animate-pulse">
                  Connecting…
                </p>
              )}
            </div>

            {/* 右側: GitHub + Avatar */}
            <div className="flex items-center space-x-4">
              {/* GitHub */}
              <Link
                href="https://github.com/raimu38/satopon"
                target="_blank"
                rel="noopener noreferrer"
                className="text-gray-400 hover:text-white transition"
                title="View source on GitHub"
              >
                <span className="material-symbols-outlined text-[24px]">
                  code
                </span>
              </Link>

              {/* Avatar */}
              <div className="relative">
                <button
                  onClick={() => setShowProfileModal(true)}
                  className="w-10 h-10 rounded-full overflow-hidden border-2 border-gray-600 hover:border-gray-800 transition-all duration-700"
                >
                  {me.icon_url ? (
                    <img
                      src={me.icon_url}
                      alt={me.display_name}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="w-full h-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center text-white font-bold">
                      {me.display_name?.charAt(0).toUpperCase()}
                    </div>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-3xl mx-auto px-6 py-8 min-h-[80vh] flex flex-col justify-center">
        <header className="mb-8 text-center">
          <h1 className="text-3xl font-bold text-white">Home</h1>
        </header>

        <div className="grid grid-cols-1 gap-6 h-full">
          <div
            onClick={() => setShowRoomModal(true)}
            className="group cursor-pointer bg-gradient-to-br from-gray-800/50 to-gray-700/30 backdrop-blur-lg rounded-2xl p-6 border border-gray-700/50 hover:border-blue-500/50 transition-all duration-300 hover:scale-101 hover:shadow-2xl hover:shadow-blue-500/20 h-full flex flex-col justify-between"
          >
            {/* 通知バッジ */}
            {rooms.some((r) => r.pending_members?.length > 0) && (
              <div className="absolute top-4 right-4 flex items-center space-x-1">
                <div className="w-2 h-2 bg-yellow-400 rounded-full animate-pulse" />
                <span className="text-yellow-400 text-xs font-medium">
                  Request
                </span>
              </div>
            )}
            <div>
              <div className="flex items-center space-x-4 mb-4">
                <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-xl flex items-center justify-center group-hover:scale-101 transition-transform duration-300">
                  <span className="material-symbols-outlined text-white text-[28px]">
                    meeting_room
                  </span>
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-white">
                    Room List
                  </h3>
                  <p className="text-gray-400 text-sm">
                    Browse and manage rooms
                  </p>
                </div>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-2xl font-bold text-blue-400">
                {rooms.length}
              </span>
              <span className="text-gray-400 text-sm">Joined Rooms</span>
            </div>
          </div>
        </div>
      </main>

      {/* Room Modal */}
      {showRoomModal && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-0 sm:p-4">
          <div
            className="w-full h-full max-w-full rounded-none overflow-hidden bg-gray-900/95 border border-gray-700/50 shadow-2xl

                  sm:rounded-2xl sm:max-w-[95%] sm:h-[95vh] lg:max-w-4xl lg:h-[90vh]"
          >
            <div className="max-w-4xl w-full h-full flex flex-col">
              {/* Header */}
              <div className="p-6 border-b border-gray-700/50 bg-gray-800/30">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-3xl font-bold text-white tracking-wide">
                    SATOPON
                  </h2>
                  <button
                    onClick={() => setShowRoomModal(false)}
                    className="w-10 h-10 hover:bg-gray-700/60 rounded-full flex items-center justify-center transition-all duration-200 hover:scale-105"
                    title="Close"
                  >
                    <span className="material-symbols-outlined text-gray-300 text-[22px]">
                      close
                    </span>
                  </button>
                </div>

                {/* Tabs */}
                <div className="flex space-x-2">
                  {[
                    {
                      key: "joined",
                      label: `Joined`,
                      count: joinedRooms.length,
                    },
                    {
                      key: "all",
                      label: `All Rooms`,
                      count: availableRooms.length,
                    },
                  ].map((tab) => (
                    <button
                      key={tab.key}
                      onClick={() =>
                        setRoomModalTab(tab.key as typeof roomModalTab)
                      }
                      className={`
                        relative px-6 py-3 rounded-lg text-sm font-medium
                        transition-all duration-300 ease-out
                        ${
                          roomModalTab === tab.key
                            ? "bg-gray-700/80 text-white shadow-lg"
                            : "text-gray-400 hover:text-white hover:bg-gray-700/40"
                        }
                      `}
                    >
                      <span className="relative z-10">{tab.label}</span>
                      {tab.count > 0 && (
                        <span
                          className={`
                          ml-2 px-2 py-0.5 text-xs rounded-full
                          ${
                            roomModalTab === tab.key
                              ? "bg-blue-500/30 text-blue-200"
                              : "bg-gray-600/50 text-gray-300"
                          }
                        `}
                        >
                          {tab.count}
                        </span>
                      )}
                    </button>
                  ))}
                </div>
              </div>

              {/* content */}
              <div className="p-6 overflow-y-auto h-full flex-1 scrollbar-hide">
                {roomModalTab === "joined" && (
                  <div className="space-y-4 max-w-3xl mx-auto">
                    {joinedRooms.map((r) => {
                      const count = onlineUsers[r.room_id]?.size ?? 0;
                      const hasPending = r.pending_members?.length > 0;
                      const isOwner = r.created_by === me.uid;

                      return (
                        <Link
                          key={r.room_id}
                          href={`/rooms/${r.room_id}`}
                          className={`
              group block p-5 rounded-xl transition-all duration-300 border
              hover:scale-[1.02] hover:shadow-lg
              ${
                isOwner
                  ? "border-blue-400/40 bg-gradient-to-r from-blue-500/10 to-blue-600/5 hover:from-blue-500/15 hover:to-blue-600/10"
                  : "border-gray-600/40 bg-gray-800/30 hover:bg-gray-700/40"
              }
            `}
                        >
                          <div className="flex justify-between items-start">
                            {/* 左側：アイコン＋名前 */}
                            <div className="flex items-center space-x-4">
                              <div
                                className={`
                  w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-lg
                  ${
                    isOwner
                      ? "bg-gradient-to-br from-blue-500 to-blue-600 shadow-lg"
                      : "bg-gradient-to-br from-gray-600 to-gray-700"
                  }
                `}
                              >
                                {r.name.charAt(0)}
                              </div>
                              <div>
                                <h3 className="font-semibold text-white text-lg sm:text-base">
                                  {r.name}
                                </h3>
                                <div className="flex items-center space-x-2 text-gray-400 text-sm sm:text-xs">
                                  <span>ID: {r.room_id}</span>
                                  {isOwner && (
                                    <span
                                      className="material-symbols-outlined text-blue-300 text-[18px] opacity-80 group-hover:opacity-100 transition-opacity"
                                      title="Owner"
                                    >
                                      shield_person
                                    </span>
                                  )}
                                  {hasPending && (
                                    <span className="px-2 py-0.5 rounded-full bg-yellow-400/20 border border-yellow-400/30 text-yellow-300">
                                      Request
                                    </span>
                                  )}
                                  {count > 0 && (
                                    <span className="px-2 py-0.5 rounded-full bg-green-400/20 border border-green-400/30 text-green-300">
                                      {count} Online
                                    </span>
                                  )}
                                </div>
                              </div>
                            </div>
                            {/* 右側に何か他要素があればここに */}
                          </div>
                        </Link>
                      );
                    })}
                    {joinedRooms.length === 0 && (
                      <div className="text-center py-16">
                        <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700/50 flex items-center justify-center">
                          <span className="material-symbols-outlined text-gray-400 text-[24px]">
                            door_open
                          </span>
                        </div>
                        <p className="text-gray-400 text-lg">
                          No joined rooms yet
                        </p>
                        <p className="text-gray-500 text-sm mt-1">
                          Browse available rooms to get started
                        </p>
                      </div>
                    )}
                  </div>
                )}

                {roomModalTab === "all" && (
                  <div className="space-y-4 max-w-3xl mx-auto">
                    {availableRooms.map((r) => {
                      const pending = r.pending_members?.some(
                        (m: any) => m.uid === me.uid
                      );

                      return (
                        <div
                          key={r.room_id}
                          className="p-5 bg-gray-800/40 rounded-xl border border-gray-600/40 hover:bg-gray-700/50 transition-all duration-300"
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-4">
                              <div className="w-12 h-12 flex items-center justify-center rounded-full bg-gradient-to-br from-gray-600 to-gray-700 text-white text-lg font-bold shadow-lg">
                                {r.name.charAt(0)}
                              </div>
                              <div className="space-y-1">
                                <h3 className="text-white font-semibold text-lg">
                                  {r.name}
                                </h3>
                                <p className="text-gray-400 text-sm font-mono">
                                  ID: {r.room_id}
                                </p>
                              </div>
                            </div>

                            {/* Action Button */}
                            <div className="flex items-center space-x-3">
                              {pending ? (
                                <button
                                  onClick={async () => {
                                    await api.cancelJoinRequest(
                                      token,
                                      r.room_id
                                    );
                                    setMsg("cancel-req");
                                  }}
                                  className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-yellow-500/20 border border-yellow-500/30 hover:bg-yellow-500/30 transition-all duration-200 hover:scale-105"
                                  title="Cancel Request"
                                >
                                  <span className="material-symbols-outlined text-yellow-400 text-[20px] animate-pulse">
                                    pending
                                  </span>
                                  <span className="text-yellow-300 text-sm font-medium">
                                    Pending
                                  </span>
                                </button>
                              ) : (
                                <button
                                  onClick={async () => {
                                    await api.joinRoom(token, r.room_id);
                                    setMsg("join-req");
                                  }}
                                  className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-emerald-500/20 border border-emerald-500/30 hover:bg-emerald-500/30 transition-all duration-200 hover:scale-105"
                                  title="Request to Join"
                                >
                                  <span className="material-symbols-outlined text-emerald-400 text-[20px]">
                                    add_circle
                                  </span>
                                  <span className="text-emerald-300 text-sm font-medium">
                                    Join
                                  </span>
                                </button>
                              )}
                            </div>
                          </div>
                        </div>
                      );
                    })}
                    {availableRooms.length === 0 && (
                      <div className="text-center py-16">
                        <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700/50 flex items-center justify-center">
                          <span className="material-symbols-outlined text-gray-400 text-[24px]">
                            search_off
                          </span>
                        </div>
                        <p className="text-gray-400 text-lg">
                          No rooms available
                        </p>
                        <p className="text-gray-500 text-sm mt-1">
                          Check back later for new rooms
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
      {/* Create Room Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black/30 backdrop-blur-md flex items-center justify-center z-50 p-4">
          <div className="w-full max-w-md bg-gradient-to-br from-gray-800/60 to-gray-700/50 border border-gray-600/40 rounded-2xl shadow-xl backdrop-blur-xl p-6">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-bold text-white">Create New Room</h2>
            </div>

            <div className="space-y-5">
              <div>
                <input
                  type="text"
                  placeholder="Enter room name ※"
                  value={newRoom.name}
                  onChange={(e) => {
                    setNewRoom({ ...newRoom, name: e.target.value });
                    setFormError(null);
                  }}
                  maxLength={20}
                  className="w-full px-4 py-3 bg-gray-800/60 text-white placeholder-gray-400 rounded-lg shadow-inner focus:outline-none focus:ring-2 focus:ring-blue-500/40 transition"
                />
                <p className="text-gray-400 text-xs mt-1">
                  {newRoom.name.length} / 20
                </p>
              </div>

              <div>
                <textarea
                  placeholder="Enter description"
                  value={newRoom.description}
                  onChange={(e) => {
                    setNewRoom({ ...newRoom, description: e.target.value });
                    setFormError(null);
                  }}
                  maxLength={100}
                  rows={3}
                  className="w-full px-4 py-3 bg-gray-800/60 text-white placeholder-gray-400 rounded-lg shadow-inner focus:outline-none focus:ring-2 focus:ring-blue-500/40 transition resize-none"
                />
                <p className="text-gray-400 text-xs mt-1">
                  {newRoom.description.length} / 100
                </p>
              </div>

              {/* エラーメッセージ */}
              {formError && <p className="text-red-400 text-sm">{formError}</p>}

              <div className="flex space-x-3 pt-2">
                <button
                  onClick={() => {
                    setShowCreateModal(false);
                    setFormError(null);
                  }}
                  className="flex-1 px-4 py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-md transition"
                >
                  Cancel
                </button>
                <button
                  onClick={handleCreateRoom}
                  className="flex-1 px-4 py-3 bg-green-700 hover:bg-green-600 text-white rounded-md shadow-md hover:shadow-lg transition"
                >
                  Create Room
                </button>
              </div>
            </div>
          </div>
        </div>
      )}



      {showProfileModal && (
  <div
    className="
      fixed inset-0 bg-black/40 w-full h-screen flex items-center justify-center z-50
      p-0 sm:p-6 lg:p-8 animate-fade-in-up
    "
  >
    <div
      className="
        relative w-full h-full sm:w-full sm:h-auto sm:max-w-6xl sm:max-h-[95vh]
        rounded-none sm:rounded-2xl bg-gradient-to-br from-gray-900 to-gray-800
        backdrop-blur-xl shadow-2xl flex flex-col overflow-hidden animate-scale-up
      "
    >
      {/* Close Button */}
      <div className="absolute top-4 right-4 z-10">
        <button
          onClick={() => setShowProfileModal(false)}
          className="
            w-10 h-10 bg-gray-700 hover:bg-gray-600 rounded-full
            flex items-center justify-center transition-all duration-300
            focus:outline-none focus:ring-2 focus:ring-blue-500 animate-pop
          "
          title="Close"
        >
          <span className="material-symbols-outlined text-white text-2xl">
            close
          </span>
        </button>
      </div>

      {/* Header with Avatar & Name */}
      <div className="p-6 sm:p-8 border-b border-gray-700">
        <div className="flex items-center space-x-6">
          <div
            onClick={() => setIsEditingName(true)}
            className="w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-gradient-to-br from-blue-600 to-purple-700 overflow-hidden border-4 border-gray-600 cursor-pointer shadow-lg transform transition-all duration-300 hover:scale-105 hover:border-blue-400 flex-shrink-0"
            title="Click to edit display name"
          >
            {me.icon_url ? (
              <img src={me.icon_url} alt={me.display_name} className="w-full h-full object-cover" />
            ) : (
              <div className="w-full h-full flex items-center justify-center text-white font-bold text-3xl">
                {me.display_name?.charAt(0).toUpperCase()}
              </div>
            )}
          </div>

          <div className="flex-grow">
            {isEditingName ? (
              <div className="space-y-3">
                <input
                  type="text"
                  value={editedName}
                  onChange={(e) => setEditedName(e.target.value)}
                  maxLength={50}
                  className="w-full bg-gray-900/70 border border-gray-600 rounded-lg px-4 py-2 text-white text-lg placeholder-gray-500 focus:outline-none focus:border-blue-500 transition-colors duration-200"
                  placeholder="Enter display name"
                />
                <div className="flex space-x-4">
                  <button
                    onClick={async () => {
                      const t = editedName.trim();
                      if (!t) { alert("Display name cannot be empty."); return; }
                      await api.updateMe(token, { display_name: t });
                      setMe({ ...me, display_name: t });
                      setIsEditingName(false);
                    }}
                    className="text-green-400 hover:text-green-300 p-2 rounded-full hover:bg-gray-700 animate-pop"
                  >
                    <span className="material-symbols-outlined text-2xl">check_circle</span>
                  </button>
                  <button
                    onClick={() => { setEditedName(me.display_name); setIsEditingName(false); }}
                    className="text-red-400 hover:text-red-300 p-2 rounded-full hover:bg-gray-700 animate-pop"
                  >
                    <span className="material-symbols-outlined text-2xl">cancel</span>
                  </button>
                </div>
              </div>
            ) : (
              <>
                <h2 className="text-2xl sm:text-3xl font-bold text-white mb-1">{me.display_name}</h2>
                <p className="text-gray-400 text-sm sm:text-base">{me.email}</p>
                <div className="flex items-center space-x-6 mt-3">
                  <div className="flex items-center space-x-2">
                    <span className="material-symbols-outlined text-blue-300 text-xl">meeting_room</span>
                    <span className="text-white font-semibold">{rooms.length}</span>
                    <span className="text-gray-400 text-sm">Joined</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className="material-symbols-outlined text-green-300 text-xl">add_box</span>
                    <span className="text-white font-semibold">{myRooms.length}</span>
                    <span className="text-gray-400 text-sm">Created</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className="material-symbols-outlined text-purple-300 text-xl">people</span>
                    <span className="text-white font-semibold">{Object.values(onlineUsers).reduce((s, u) => s + u.size, 0)}</span>
                    <span className="text-gray-400 text-sm">Active</span>
                  </div>
                </div>
              </>
            )}
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="flex border-b border-gray-700 overflow-x-auto">
        {[
          { id: 'overview', label: 'Overview', icon: 'dashboard' },
          { id: 'recent_battles', label: 'Recent Battles', icon: 'history' }, // Renamed from 'performance'
          { id: 'sato_transactions', label: 'SATO Transactions', icon: 'currency_exchange' }, // New tab for SATO
        ].map((tab) => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            className={`flex items-center space-x-2 px-6 py-4 border-b-2 transition-all duration-200 whitespace-nowrap ${
              activeTab === tab.id
                ? 'border-blue-500 text-blue-400 bg-blue-900/20'
                : 'border-transparent text-gray-400 hover:text-white hover:bg-gray-700/50'
            }`}
          >
            <span className="material-symbols-outlined text-xl">{tab.icon}</span>
            <span className="font-medium">{tab.label}</span>
          </button>
        ))}
      </div>

      {/* Content Area */}
      <div className="flex-1 overflow-y-auto p-6 sm:p-8">
        {activeTab === 'overview' && (
          <div className="space-y-8">
            {/* Key Stats Cards */}
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
              <div className="bg-gradient-to-br from-blue-900/50 to-blue-700/30 p-4 rounded-xl border border-blue-600/30 backdrop-blur-sm">
                <div className="text-center">
                  <span className="material-symbols-outlined text-blue-300 text-3xl">sports_esports</span>
                  <div className="text-2xl font-bold text-white mt-2">{stats.ponRounds}</div>
                  <div className="text-blue-200 text-sm">Total Games</div>
                </div>
              </div>
              <div className="bg-gradient-to-br from-green-900/50 to-emerald-700/30 p-4 rounded-xl border border-green-600/30 backdrop-blur-sm">
                <div className="text-center">
                  <span className="material-symbols-outlined text-green-300 text-3xl">emoji_events</span>
                  <div className="text-2xl font-bold text-white mt-2">{stats.winRate}%</div>
                  <div className="text-green-200 text-sm">Win Rate</div>
                </div>
              </div>
              <div className="bg-gradient-to-br from-purple-900/50 to-pink-700/30 p-4 rounded-xl border border-purple-600/30 backdrop-blur-sm">
                <div className="text-center">
                  <span className="material-symbols-outlined text-purple-300 text-3xl">whatshot</span>
                  <div className="text-2xl font-bold text-white mt-2">{stats.bestStreak}</div>
                  <div className="text-purple-200 text-sm">Best Streak</div>
                </div>
              </div>
              <div className="bg-gradient-to-br from-orange-900/50 to-red-700/30 p-4 rounded-xl border border-orange-600/30 backdrop-blur-sm">
                <div className="text-center">
                  <span className="material-symbols-outlined text-orange-300 text-3xl">trending_up</span>
                  <div className="text-2xl font-bold text-white mt-2">{stats.maxPon}</div>
                  <div className="text-orange-200 text-sm">Max Score</div>
                </div>
              </div>
            </div>

            {/* Win/Loss Ratio Pie Chart */}
<div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
  <h3 className="text-xl font-bold text-white mb-4 flex items-center">
    <span className="material-symbols-outlined text-blue-400 mr-2">pie_chart</span>
    Win/Loss Ratio
  </h3>
  <div className="flex items-center justify-between">
    <div className="w-32 h-32 relative"> {/* Added relative for percentage text positioning */}
      {stats.ponRounds > 0 ? (
        <>
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={[
                  { name: 'Wins', value: stats.wins, color: '#3B82F6' }, // Vibrant Blue (Tailwind blue-500)
                  { name: 'Losses', value: stats.ponRounds - stats.wins, color: '#EF4444' } // Classic Red (Tailwind red-500)
                ]}
                cx="50%"
                cy="50%"
                innerRadius={30} // Slightly larger hole for better percentage display
                outerRadius={60}
                paddingAngle={3} // Reduced padding for a more connected feel
                dataKey="value"
                stroke="none" // Remove borders between slices for a cleaner look
              >
                {[
                  { name: 'Wins', value: stats.wins, color: '#3B82F6' },
                  { name: 'Losses', value: stats.ponRounds - stats.wins, color: '#EF4444' }
                ].map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
            </PieChart>
          </ResponsiveContainer>
          {/* Win Rate Percentage Overlay */}
          <div className="absolute inset-0 flex items-center justify-center text-white text-center">
            <span className="text-xl font-bold">
              {stats.ponRounds > 0 ? `${((stats.wins / stats.ponRounds) * 100).toFixed(0)}%` : '0%'}
            </span>
          </div>
        </>
      ) : (
        <div className="text-gray-400 text-center text-sm">No PON games played yet.</div>
      )}
    </div>
    <div className="flex-1 ml-8">
      <div className="space-y-3">
        <div className="flex items-center justify-between p-2 rounded-md bg-gray-700/70 shadow-inner"> {/* Refined row styling */}
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-blue-500 rounded-full shadow-sm"></div> {/* Matching blue dot */}
            <span className="text-gray-200">Wins</span>
          </div>
          <span className="text-white font-semibold">{stats.wins}</span>
        </div>
        <div className="flex items-center justify-between p-2 rounded-md bg-gray-700/70 shadow-inner"> {/* Refined row styling */}
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-red-500 rounded-full shadow-sm"></div> {/* Matching red dot */}
            <span className="text-gray-200">Losses</span>
          </div>
          <span className="text-white font-semibold">{stats.ponRounds - stats.wins}</span>
        </div>
        {/* Optional: Add a Total Rounds line if desired, maintaining the new style */}
        {stats.ponRounds > 0 && (
          <div className="flex items-center justify-between p-2 rounded-md bg-gray-700/70 shadow-inner">
            <div className="flex items-center space-x-2">
              <span className="material-symbols-outlined text-gray-400 text-base">functions</span>
              <span className="text-gray-200">Total Rounds</span>
            </div>
            <span className="text-white font-semibold">{stats.ponRounds}</span>
          </div>
        )}
      </div>
    </div>
  </div>
</div>
            {/* Detailed PON Stats */}
            <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
              {[
                { icon: 'calculate', value: stats.avgPonPts, label: 'Avg Score', color: 'text-blue-300' },
                { icon: 'stacked_line_chart', value: stats.totalPonPts, label: 'Total Points', color: 'text-yellow-300' },
                { icon: 'trending_down', value: stats.minPon, label: 'Min Score', color: 'text-red-300' },
              ].map((stat, index) => (
                <div key={index} className="bg-gray-800/50 p-4 rounded-xl border border-gray-700 text-center">
                  <span className={`material-symbols-outlined text-2xl ${stat.color}`}>{stat.icon}</span>
                  <div className="text-lg font-semibold text-white mt-2">{stat.value}</div>
                  <div className="text-xs text-gray-400">{stat.label}</div>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'recent_battles' && (
          <div className="space-y-6">
            <h3 className="text-xl font-bold text-white flex items-center">
              <span className="material-symbols-outlined text-blue-400 mr-2">history</span>
              Recent Battles (PON)
            </h3>
            {stats.groupedOpponents.length > 0 ? (
              <div className="grid gap-4">
                {stats.groupedOpponents.map((round, index) => (
                  <div key={index} className="bg-gray-800/50 p-4 rounded-xl border border-gray-700 flex flex-col sm:flex-row items-start sm:items-center justify-between">
                    <div className="flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 w-full sm:w-auto mb-3 sm:mb-0">
                      <div className="text-gray-400 text-sm flex-shrink-0">
                        <span className="material-symbols-outlined text-xs mr-1">event</span>
                        {round.date}
                      </div>
                      <div className="flex items-center space-x-2 flex-wrap">
                        {round.participants.map((p, pIdx) => (
                          <div key={p.uid} className="flex items-center space-x-2 bg-gray-700/50 px-3 py-1 rounded-full">
                            <div className="w-8 h-8 rounded-full overflow-hidden border border-gray-500 flex-shrink-0">
                              {p.iconUrl ? (
                                <img src={p.iconUrl} alt={p.displayName} className="w-full h-full object-cover" />
                              ) : (
                                <div className="w-full h-full bg-gradient-to-r from-gray-500 to-gray-600 flex items-center justify-center text-white text-xs font-bold">
                                  {p.displayName.charAt(0).toUpperCase()}
                                </div>
                              )}
                            </div>
                            <span className="text-white text-sm">{p.displayName}</span>
                            <span className={`font-bold text-sm ${p.score > 0 ? 'text-green-400' : p.score < 0 ? 'text-red-400' : 'text-gray-400'}`}>
                              {p.score > 0 ? `+${p.score}` : p.score}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-16">
                <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700/50 flex items-center justify-center">
                  <span className="material-symbols-outlined text-gray-400 text-[24px]">
                    bar_chart_off
                  </span>
                </div>
                <p className="text-gray-400 text-lg">No PON battle history found.</p>
                <p className="text-gray-500 text-sm mt-1">
                  Participate in PON games to see your battle records here!
                </p>
              </div>
            )}
          </div>
        )}

        {activeTab === 'sato_transactions' && (
          <div className="space-y-6">
            <h3 className="text-xl font-bold text-white flex items-center">
              <span className="material-symbols-outlined text-emerald-400 mr-2">currency_exchange</span>
              SATO Transactions
            </h3>
            {userPointHistory.filter(r => r.round_id.startsWith("SATO")).length > 0 ? (
              <div className="grid gap-4">
                {[
                  { icon: 'arrow_downward', value: stats.satoIn, label: 'Total Received', color: 'text-emerald-300' },
                  { icon: 'arrow_upward', value: stats.satoOut, label: 'Total Sent', color: 'text-rose-300' },
                  { icon: 'savings', value: stats.satoNet, label: 'Net Balance', color: 'text-yellow-300' },
                  { icon: 'auto_graph', value: stats.avgSato, label: 'Avg Transaction', color: 'text-cyan-300' },
                  { icon: 'trending_up', value: stats.maxSato, label: 'Largest Transaction', color: 'text-lime-300' }
                ].map((stat, index) => (
                  <div key={index} className="bg-gray-800/50 p-4 rounded-xl border border-gray-700 text-center">
                    <span className={`material-symbols-outlined text-2xl ${stat.color}`}>{stat.icon}</span>
                    <div className="text-lg font-semibold text-white mt-2">{stat.value}</div>
                    <div className="text-xs text-gray-400">{stat.label}</div>
                  </div>
                ))}
                <div className="col-span-full">
                  <h4 className="text-lg font-semibold text-white mt-4 mb-2">Transaction Log</h4>
                  <div className="space-y-3">
                    {userPointHistory.filter(r => r.round_id.startsWith("SATO")).map((round, index) => {
                      const myPoint = round.points.find((p: any) => p.uid === me.uid);
                      const isPositive = myPoint && myPoint.value > 0;
                      const bgColorClass = isPositive ? "bg-emerald-900/30 border-emerald-700/40" : "bg-rose-900/30 border-rose-700/40";
                      const date = new Date(round.created_at || Date.now()).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' });

                      const otherParticipants = round.points
                        .filter((p: any) => p.uid !== me.uid)
                        .map((p: any) => userList.find(u => u.uid === p.uid)?.display_name || "Unknown User")
                        .join(', ');

                      return (
                        <div key={index} className={`p-4 rounded-lg border shadow-md ${bgColorClass}`}>
                          <div className="flex justify-between items-center mb-2">
                            <span className="font-bold text-white">SATO Transfer</span>
                            <span className={`text-xl font-extrabold ${isPositive ? 'text-green-400' : 'text-red-400'}`}>
                              {myPoint ? (myPoint.value > 0 ? `+${myPoint.value}` : myPoint.value) : 'N/A'}
                            </span>
                          </div>
                          <p className="text-gray-300 text-sm">
                            Date: {date}
                          </p>
                          {otherParticipants && (
                            <p className="text-gray-300 text-sm mt-1">
                              Involved with: {otherParticipants}
                            </p>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            ) : (
              <div className="text-center py-16">
                <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gray-700/50 flex items-center justify-center">
                  <span className="material-symbols-outlined text-gray-400 text-[24px]">
                    credit_card_off
                  </span>
                </div>
                <p className="text-gray-400 text-lg">No SATO transactions found.</p>
                <p className="text-gray-500 text-sm mt-1">
                  Engage in SATO transfers to see your transaction history here!
                </p>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Footer with Logout */}
    <div className="border-t border-gray-700 p-4 flex justify-center">
  <button
    onClick={async () => {
      await signOut(auth);
      router.replace("/");
    }}
    className="
      px-7 py-3 bg-purple-300 hover:bg-purple-200 rounded-3xl text-purple-800 font-semibold
      flex items-center space-x-2 animate-pop mx-auto
      transform hover:scale-105 transition-all duration-200 ease-out
      shadow-lg
    "
  >
    <span className="material-symbols-outlined text-purple-600">star</span>
    <span>Bye-bye!</span>
  </button>
</div></div>
  </div>
)}




      {/* Footer.tsx */}
      <footer className="fixed bottom-0 inset-x-0 bg-gray-900/90 border-t border-gray-300/20 backdrop-blur-lg z-0">
        <div className="max-w-lg mx-auto flex justify-between items-center py-2 px-6 text-white relative">
          {/* Active Users */}
          <div className="flex items-center space-x-1 text-green-400 text-xs bg-gray-700/30 px-2 py-1 rounded-full backdrop-blur-sm">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
            <span>
              {Object.values(onlineUsers).reduce(
                (sum, users) => sum + users.size,
                0
              )}
            </span>
          </div>

          {/* Center Floating + Button */}
          <button
            onClick={() => setShowCreateModal(true)}
            title="Create Room"
            className={`
          absolute -top-6 left-1/2 transform -translate-x-1/2
          w-14 h-14 rounded-full
          ${styles.createButtonBackground}
          border border-white/20
          backdrop-blur-md shadow-[0_8px_24px_rgba(0,0,0,0.25)]
          text-white transition-all duration-300
          flex items-center justify-center
          `}
          >
            <span className="material-symbols-outlined text-[28px]">add</span>
          </button>
          {/* Profile Button - ガラス感 + カラフル */}
        </div>
      </footer>
    </div>
  );
}


